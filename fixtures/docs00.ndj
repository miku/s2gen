{"access_facet":"Electronic Resources","author":["Singh, Pravendra"],"spellingShingle":["Singh, Pravendra","Arxiv","Implementing an intelligent version of the classical sliding-puzzle game   for unix terminals using Golang's concurrency primitives","Computer Science - Artificial Intelligence"],"author_sort":"singh, pravendra","spelling":["Singh, Pravendra Arxiv Computer Science - Artificial Intelligence http://arxiv.org/abs/1503.08345 An intelligent version of the sliding-puzzle game is developed using the new Go programming language, which uses a concurrent version of the A* Informed Search Algorithm to power solver-bot that runs in the background. The game runs in computer system's terminals. Mainly, it was developed for UNIX-type systems but it works pretty well in nearly all the operating systems because of cross-platform compatibility of the programming language used. The game uses language's concurrency primitives to simplify most of the hefty parts of the game. A real-time notification delivery architecture is developed using language's built-in concurrency support, which performs similar to event based context aware invocations like we see on the web platform. Comment: 8 pages Implementing an intelligent version of the classical sliding-puzzle game for unix terminals using Golang's concurrency primitives Arxiv"],"facet_avail":["Online"],"format":["ElectronicArticle"],"fullrecord":"blob:ai-121-b2FpOmFyWGl2Lm9yZzoxNTAzLjA4MzQ1","id":"ai-121-b2FpOmFyWGl2Lm9yZzoxNTAzLjA4MzQ1","imprint":"Arxiv, 2015","mega_collection":["Arxiv"],"publishDateSort":"2015","publisher":["Arxiv"],"record_id":"oai:arXiv.org:1503.08345","recordtype":"ai","series":["Arxiv"],"source_id":"121","title":"Implementing an intelligent version of the classical sliding-puzzle game   for unix terminals using Golang's concurrency primitives","title_full":"Implementing an intelligent version of the classical sliding-puzzle game   for unix terminals using Golang's concurrency primitives","title_fullStr":"Implementing an intelligent version of the classical sliding-puzzle game   for unix terminals using Golang's concurrency primitives","title_full_unstemmed":"Implementing an intelligent version of the classical sliding-puzzle game   for unix terminals using Golang's concurrency primitives","title_short":"Implementing an intelligent version of the classical sliding-puzzle game   for unix terminals using Golang's concurrency primitives","title_sort":"implementing an intelligent version of the classical sliding-puzzle game   for unix terminals using golang's concurrency primitives","topic":["Computer Science - Artificial Intelligence"],"url":["http://arxiv.org/abs/1503.08345"],"publishDate":["2015-08-22"],"physical":[""],"description":"  An intelligent version of the sliding-puzzle game is developed using the new Go programming language, which uses a concurrent version of the A* Informed Search Algorithm to power solver-bot that runs in the background. The game runs in computer system's terminals. Mainly, it was developed for UNIX-type systems but it works pretty well in nearly all the operating systems because of cross-platform compatibility of the programming language used. The game uses language's concurrency primitives to simplify most of the hefty parts of the game. A real-time notification delivery architecture is developed using language's built-in concurrency support, which performs similar to event based context aware invocations like we see on the web platform.  Comment: 8 pages","container_title":"Arxiv","format_de105":["Article, E-Article"],"format_de14":["Article, E-Article"],"format_de15":["Article, E-Article"],"format_de520":["Article, E-Article"],"format_de540":["Article, E-Article"],"format_dech1":["Article, E-Article"],"format_ded117":["Article, E-Article"],"format_degla1":["E-Article"],"format_del152":["Buch"],"format_del189":["Article, E-Article"],"format_dezi4":["Article"],"format_dezwi2":["Article, E-Article"],"format_nrw":["Article, E-Article"],"branch_nrw":["Electronic Resources"],"_version_":1615835564950421512,"institution":["finc"],"geogr_code":["not assigned"],"last_indexed":"2018-10-31T10:14:36.692Z","geogr_code_person":["not assigned"],"finc_class_facet":["not assigned"]}
{"access_facet":"Electronic Resources","spelling":["n.n. https://www.wiso-net.de/document/ICT__83777853 (PRWeb) - Gobot (https://gobot.io) the open source robotics and Internet of Things (IoT) framework has just reached a major milestone today with the release of version 1.0. Now supporting over 24 different hardware and software platforms, the framework can also connect using Machine to Machine (M2M) communication standards such as MQTT. \"We created Gobot to make IoT development easy, and at the same time provide industrial strength tools,\" says Ron Evans, the creator of Gobot and `Ringleader` of The Hybrid Group (http://hybridgroup.com), the software consultancy that has sponsored the open source project. \"By using the Go programming language we get powerful performance and portability that is unmatched.\" \"Modern development tools like Gobot can unlock the power in next-generation devices, and can help developers take advantage of new opportunities being opened in IoT, robotics, and drones, says Rex St. John, Ecosystem Manager at Intel New Technology Group. \"Gobot can use all of the cores on these new multi-core devices right out of the box. \"Being an innovator on the frontier means we can choose the best technology stack and design for forward-thinking solutions. And we love Gobot!\" says Jinger Zeng, CEO of Dronesmith, a drone technology company currently in the TechStars IoT accelerator. \"Gobot strikes the perfect balance between simplicity and performance.\" \"As real-world robotics and IoT solutions begin to take off, developers need powerful yet simple tools like Gobot,\" says Brian Flannery, Ecosystem Manager at Apcera, creators of the open source messaging software NATS. \"We`ve seen how quickly and easily developers can use Gobot to get their hardware connected to a simple and secure messaging system like NATS.\" Written in the \"Go\" programming language, a programming language created by Google, Gobot provides an easy way to program drones, robots and connected devices. Gobot is now in the 99th percentile of most popular Golang projects on Github, the open sourc Gobot Makes Internet of Things Development Both Easy And Powerful (PRWeb) - Gobot (https://gobot.io) the open source robotics and Internet of Things (IoT) framework has just reached a major milestone today with the release of version 1.0. Now supporting over 24 different hardware and software platforms, the framework can also connect using Machine to Machine (M2M) communication standards such as MQTT. \"We created Gobot to make IoT development easy, and at the same time provide industrial strength tools,\" says Ron Evans, the creator of Gobot and `Ringleader` of The Hybrid Group (http://hybridgroup.com), the software consultancy that has sponsored the open source project. \"By using the Go programming language we get powerful performance and portability that is unmatched.\" \"Modern development tools like Gobot can unlock the power in next-generation devices, and can help developers take advantage of new opportunities being opened in IoT, robotics, and drones, says Rex St. John, Ecosystem Manager at Intel New Technology Group. \"Gobot can use all of the cores on these new multi-core devices right out of the box. \"Being an innovator on the frontier means we can choose the best technology stack and design for forward-thinking solutions. And we love Gobot!\" says Jinger Zeng, CEO of Dronesmith, a drone technology company currently in the TechStars IoT accelerator. \"Gobot strikes the perfect balance between simplicity and performance.\" \"As real-world robotics and IoT solutions begin to take off, developers need powerful yet simple tools like Gobot,\" says Brian Flannery, Ecosystem Manager at Apcera, creators of the open source messaging software NATS. \"We`ve seen how quickly and easily developers can use Gobot to get their hardware connected to a simple and secure messaging system like NATS.\" Written in the \"Go\" programming language, a programming language created by Google, Gobot provides an easy way to program drones, robots and connected devices. Gobot is now in the 99th percentile of most popular Golang projects on Github, the open source coding website. The 1.0 release of Gobot creates an industrial-strength technology for professional IoT application development. For more information about Gobot, go to the web site at http://gobot.io (c) 2016 Global Data Point. All Rights Reserved. Provided by SyndiGate Media Inc. (<a href=\"http://syndigate.info\">Syndigate.info</a> ). ICT Monitor Worldwide"],"facet_avail":["Online"],"format":["ElectronicArticle"],"fullrecord":"blob:ai-48-SUNUX184Mzc3Nzg1Mw","id":"ai-48-SUNUX184Mzc3Nzg1Mw","institution":["DE-Pl11"],"imprint":"2016","mega_collection":["Genios (Technik)"],"publishDateSort":"2016","record_id":"83777853","recordtype":"ai","series":["ICT Monitor Worldwide"],"spellingShingle":["ICT Monitor Worldwide","Gobot Makes Internet of Things Development Both Easy And Powerful","n.n."],"source_id":"48","title":"Gobot Makes Internet of Things Development Both Easy And Powerful","title_full":"Gobot Makes Internet of Things Development Both Easy And Powerful","title_fullStr":"Gobot Makes Internet of Things Development Both Easy And Powerful","title_full_unstemmed":"Gobot Makes Internet of Things Development Both Easy And Powerful","title_short":"Gobot Makes Internet of Things Development Both Easy And Powerful","title_sort":"gobot makes internet of things development both easy and powerful","topic":["n.n."],"url":["https://www.wiso-net.de/document/ICT__83777853"],"publishDate":["2016-12-22"],"physical":[""],"description":"","container_title":"ICT Monitor Worldwide","format_de105":["Article, E-Article"],"format_de14":["Article, E-Article"],"format_de15":["Article, E-Article"],"format_de520":["Article, E-Article"],"format_de540":["Article, E-Article"],"format_dech1":["Article, E-Article"],"format_ded117":["Article, E-Article"],"format_degla1":["E-Article"],"format_del152":["Buch"],"format_del189":["Article, E-Article"],"format_dezi4":["Article"],"format_dezwi2":["Article, E-Article"],"format_nrw":["Article, E-Article"],"branch_nrw":["Electronic Resources"],"_version_":1615859449588613120,"geogr_code":["not assigned"],"last_indexed":"2018-10-31T16:34:14.721Z","geogr_code_person":["not assigned"],"finc_class_facet":["not assigned"]}
{"access_facet":"Electronic Resources","spelling":["n.n. https://www.wiso-net.de/document/ICT__96304124 (PRWeb) - Maxim Kupriianov, a Sphere Software Senior Go Engineer, will give a presentation called, Business Logic Verification in Go Applications Using Contexts, at the 2017 GoWayFest conference in Minsk, Belarus on July 21st at 11:00am. GoWayFest 2017, the first of its kind conference in Eastern Europe, will focus on the Go open source programming language that was created by Google in 2007. This conference will feature renowned Golang speakers with a broad range of expertise, including scalability, visualizing concurrency, optimization, business logic and more. Go was created to be scalable to large systems ( similar to Java and C++ ), statically typed, and support networking & multiprocessing. Some of the companies who are using Go with other languages include: Google, Netflix, Gett, Uber, Dropbox, and Sphere Software. Were delighted to have Maxim represent us at this premier conference event, said Leon Ginsburg, CEO of Sphere Software. We feel its important to not only serve our clients, but also to advance the thought leadership within the Go development community by sharing some of our best practices. Maxim Kupriianov has been working with Go for four years in addition to being an active open-source contributor. In his presentation, he will share best practices relating to: Verification of business logic flow Explaining the purpose and use cases for Go contexts Leveraging contexts to capture the execution flow for further analysis Im excited to have been selected to give a presentation at GoWayFest 2017, Maxim said. One of the great things about being a software engineer is that theres a never ending supply of fun things to do and learn. Sphere Software is honored to participate as one of this years GoWayFest 2017 participating partners in addition to continuing our tradition of supporting the worldwide Go community. About Sphere Software With headquarters in Chicago and regional offices in New York, Bueno Aires and Eastern Europe, Sphere Software is a global Maxim Kupriianov of Sphere Software to Speak at GoWayFest 2017 in Minsk, Belarus (PRWeb) - Maxim Kupriianov, a Sphere Software Senior Go Engineer, will give a presentation called, Business Logic Verification in Go Applications Using Contexts, at the 2017 GoWayFest conference in Minsk, Belarus on July 21st at 11:00am. GoWayFest 2017, the first of its kind conference in Eastern Europe, will focus on the Go open source programming language that was created by Google in 2007. This conference will feature renowned Golang speakers with a broad range of expertise, including scalability, visualizing concurrency, optimization, business logic and more. Go was created to be scalable to large systems ( similar to Java and C++ ), statically typed, and support networking & multiprocessing. Some of the companies who are using Go with other languages include: Google, Netflix, Gett, Uber, Dropbox, and Sphere Software. Were delighted to have Maxim represent us at this premier conference event, said Leon Ginsburg, CEO of Sphere Software. We feel its important to not only serve our clients, but also to advance the thought leadership within the Go development community by sharing some of our best practices. Maxim Kupriianov has been working with Go for four years in addition to being an active open-source contributor. In his presentation, he will share best practices relating to: Verification of business logic flow Explaining the purpose and use cases for Go contexts Leveraging contexts to capture the execution flow for further analysis Im excited to have been selected to give a presentation at GoWayFest 2017, Maxim said. One of the great things about being a software engineer is that theres a never ending supply of fun things to do and learn. Sphere Software is honored to participate as one of this years GoWayFest 2017 participating partners in addition to continuing our tradition of supporting the worldwide Go community. About Sphere Software With headquarters in Chicago and regional offices in New York, Bueno Aires and Eastern Europe, Sphere Software is a global company with a local focus and a national presence. Sphere Software has over a decade of proven success creating innovative web and mobile software solutions, big data analytics and providing staff augmentation for both start-ups and the Fortune 100. Our consulting services includes DevOps and the Atlassian product suite. Spheres technical expertise includes Go, Python, React.js, Node.js, Scala, Clojure, .NET, Java, Ruby on Rails and a broad range of industry experience as well. To find out how Sphere Software can help your business reach peak performance, contact us on Twitter @SphereSW or on our website at http://www.sphereinc.com. (c) 2017 Global Data Point. All Rights Reserved. Provided by SyndiGate Media Inc. (<a href=\"http://syndigate.info\">Syndigate.info</a> ). ICT Monitor Worldwide"],"facet_avail":["Online"],"format":["ElectronicArticle"],"fullrecord":"blob:ai-48-SUNUX185NjMwNDEyNA","id":"ai-48-SUNUX185NjMwNDEyNA","institution":["DE-Pl11"],"imprint":"2017","mega_collection":["Genios (Technik)"],"publishDateSort":"2017","record_id":"96304124","recordtype":"ai","series":["ICT Monitor Worldwide"],"spellingShingle":["ICT Monitor Worldwide","Maxim Kupriianov of Sphere Software to Speak at GoWayFest 2017 in Minsk, Belarus","n.n."],"source_id":"48","title":"Maxim Kupriianov of Sphere Software to Speak at GoWayFest 2017 in Minsk, Belarus","title_full":"Maxim Kupriianov of Sphere Software to Speak at GoWayFest 2017 in Minsk, Belarus","title_fullStr":"Maxim Kupriianov of Sphere Software to Speak at GoWayFest 2017 in Minsk, Belarus","title_full_unstemmed":"Maxim Kupriianov of Sphere Software to Speak at GoWayFest 2017 in Minsk, Belarus","title_short":"Maxim Kupriianov of Sphere Software to Speak at GoWayFest 2017 in Minsk, Belarus","title_sort":"maxim kupriianov of sphere software to speak at gowayfest 2017 in minsk, belarus","topic":["n.n."],"url":["https://www.wiso-net.de/document/ICT__96304124"],"publishDate":["2017-01-01"],"physical":[""],"description":"","container_title":"ICT Monitor Worldwide","format_de105":["Article, E-Article"],"format_de14":["Article, E-Article"],"format_de15":["Article, E-Article"],"format_de520":["Article, E-Article"],"format_de540":["Article, E-Article"],"format_dech1":["Article, E-Article"],"format_ded117":["Article, E-Article"],"format_degla1":["E-Article"],"format_del152":["Buch"],"format_del189":["Article, E-Article"],"format_dezi4":["Article"],"format_dezwi2":["Article, E-Article"],"format_nrw":["Article, E-Article"],"branch_nrw":["Electronic Resources"],"_version_":1615859437147258880,"geogr_code":["not assigned"],"last_indexed":"2018-10-31T16:34:03.815Z","geogr_code_person":["not assigned"],"finc_class_facet":["not assigned"]}
{"access_facet":"Electronic Resources","spelling":["n.n. https://www.wiso-net.de/document/ICT__101851602 (PRWeb) - Ruby on Rails, Go, front-end and back-end developers, along with UX/UI designers from around the world will gather at Sphere Softwares annual SphereCon on October 28, 2017 to network and gain best-practice insights from Sphere experts. This free event will take place at Interias conference hall located at Volodymyrska St, 49a, Kiev. With Ruby and Go constantly evolving as premiere programming languages, the need to discuss and network about its changes increases. This prompted Sphere Software and its CEO Leon Ginsburg to incept SphereCon as a way for developers to gather for a free, one-day conference that supports discussion around these programs. We organized SphereCon to share our knowledge and educate the development community on how to build scalable software products that can work in high-load, demanding environments, said Leon Ginsburg. At Sphere, we develop scalable products for a wide range of companies -- and it`s important to share this expertise with the community because itll give developers a competitive advantage in the long run. Contributing expertise to the software development ecosystem has been a core principle for Sphere Software since it started in 2005. Sphere Software does this through conferences, open source projects, blogs, case studies, knowledge sessions, Sphere academy, and developing their own products. As a developer, you should always be looking to fine-tune your expertise in programming languages, Ginsburg added. It not only makes you more marketable, but makes you more versatile as a developer. SphereCon is a great opportunity to connect with other developers, and allow them to expand their professional network. SphereCon will feature the following speakers: Artur Koshtei - A back-end Web developer at Gett.com, with a passion for technology and complex problem solving. Artur will concentrate on techniques and solutions that helped Gett to increase system stability in http calls, caching, and more. Ilya Biin - Ilya is a G SphereCon 2017 to take place in Kiev (Ukraine), a conference uniting Ruby on Rails, Go, software developers and designers (PRWeb) - Ruby on Rails, Go, front-end and back-end developers, along with UX/UI designers from around the world will gather at Sphere Softwares annual SphereCon on October 28, 2017 to network and gain best-practice insights from Sphere experts. This free event will take place at Interias conference hall located at Volodymyrska St, 49a, Kiev. With Ruby and Go constantly evolving as premiere programming languages, the need to discuss and network about its changes increases. This prompted Sphere Software and its CEO Leon Ginsburg to incept SphereCon as a way for developers to gather for a free, one-day conference that supports discussion around these programs. We organized SphereCon to share our knowledge and educate the development community on how to build scalable software products that can work in high-load, demanding environments, said Leon Ginsburg. At Sphere, we develop scalable products for a wide range of companies -- and it`s important to share this expertise with the community because itll give developers a competitive advantage in the long run. Contributing expertise to the software development ecosystem has been a core principle for Sphere Software since it started in 2005. Sphere Software does this through conferences, open source projects, blogs, case studies, knowledge sessions, Sphere academy, and developing their own products. As a developer, you should always be looking to fine-tune your expertise in programming languages, Ginsburg added. It not only makes you more marketable, but makes you more versatile as a developer. SphereCon is a great opportunity to connect with other developers, and allow them to expand their professional network. SphereCon will feature the following speakers: Artur Koshtei - A back-end Web developer at Gett.com, with a passion for technology and complex problem solving. Artur will concentrate on techniques and solutions that helped Gett to increase system stability in http calls, caching, and more. Ilya Biin - Ilya is a Golang expert at Gett.com, with 10+ years of experience in design, architecture, development, testing, and implementation of applications. He will discuss rapid Web development and multitasking using Go versus Ruby. Maxim Kupriianov - An experienced Go developer who likes to create open-source software solutions that are useful for enterprises and education. Maxim will present a robust caching layer written in Go that reduces the amount of requests to Amazon S3. Anton Shemerey - A Ruby on Rails Web developer with a wide background in high-load heterogeneity systems, experience building monolithic, and micro service oriented apps. Anton will share \"mental context switch\" problems and show the diversity of Ruby on Rails and Go. Mikhail Kurakin & Sergey Makarov - With Mikhail being a talented UX/UI designer, and Sergey being a front-end developer, these two will cover the collaboration process, how to bring complex applications to life, and how to adapt them to inconstant clients requirements. Having the opportunity to share my expertise, and walk other developers down my path is exciting, said Ilya Biin. The development community is so tightly knit and open to discussions and new ideas, this conference will help a lot of people in our industry. For more information and to register for this free event, please visit SphereCons website. SphereCon 2017 is made possible in partnership with Gett.com, Groupon, Eligo Energy, and Integra Credit. About Sphere Software With headquarters in Chicago and regional offices in New York, Miami, Buenos Aires, Russia, Ukraine, and Belarus, Sphere Software is a global company with a local focus and a national presence. Sphere Software has over a decade of proven success creating innovative web and mobile software solutions, big data analytics and providing staff augmentation for both start-ups and the Fortune 100. Our consulting services includes DevOps and the Atlassian product suite. Spheres technical expertise includes Ruby on Rails, Go, Python, React.js, Node.js, Scala and Clojure, and a broad range of industry experience as well. To find out how Sphere Software can help your business reach peak performance, connect with us on Twitter @SphereSW or Facebook, or contact us on our website at http://www.sphereinc.com. (c) 2017 Global Data Point. All Rights Reserved. Provided by SyndiGate Media Inc. (<a href=\"http://syndigate.info\">Syndigate.info</a> ). ICT Monitor Worldwide"],"facet_avail":["Online"],"format":["ElectronicArticle"],"fullrecord":"blob:ai-48-SUNUX18xMDE4NTE2MDI","id":"ai-48-SUNUX18xMDE4NTE2MDI","institution":["DE-Pl11"],"imprint":"2017","mega_collection":["Genios (Technik)"],"publishDateSort":"2017","record_id":"101851602","recordtype":"ai","series":["ICT Monitor Worldwide"],"spellingShingle":["ICT Monitor Worldwide","SphereCon 2017 to take place in Kiev (Ukraine), a conference uniting Ruby on Rails, Go, software developers and designers","n.n."],"source_id":"48","title":"SphereCon 2017 to take place in Kiev (Ukraine), a conference uniting Ruby on Rails, Go, software developers and designers","title_full":"SphereCon 2017 to take place in Kiev (Ukraine), a conference uniting Ruby on Rails, Go, software developers and designers","title_fullStr":"SphereCon 2017 to take place in Kiev (Ukraine), a conference uniting Ruby on Rails, Go, software developers and designers","title_full_unstemmed":"SphereCon 2017 to take place in Kiev (Ukraine), a conference uniting Ruby on Rails, Go, software developers and designers","title_short":"SphereCon 2017 to take place in Kiev (Ukraine), a conference uniting Ruby on Rails, Go, software developers and designers","title_sort":"spherecon 2017 to take place in kiev (ukraine), a conference uniting ruby on rails, go, software developers and designers","topic":["n.n."],"url":["https://www.wiso-net.de/document/ICT__101851602"],"publishDate":["2017-01-01"],"physical":[""],"description":"","container_title":"ICT Monitor Worldwide","format_de105":["Article, E-Article"],"format_de14":["Article, E-Article"],"format_de15":["Article, E-Article"],"format_de520":["Article, E-Article"],"format_de540":["Article, E-Article"],"format_dech1":["Article, E-Article"],"format_ded117":["Article, E-Article"],"format_degla1":["E-Article"],"format_del152":["Buch"],"format_del189":["Article, E-Article"],"format_dezi4":["Article"],"format_dezwi2":["Article, E-Article"],"format_nrw":["Article, E-Article"],"branch_nrw":["Electronic Resources"],"_version_":1615859467031674883,"geogr_code":["not assigned"],"last_indexed":"2018-10-31T16:34:32.267Z","geogr_code_person":["not assigned"],"finc_class_facet":["not assigned"]}
{"access_facet":"Electronic Resources","spelling":["n.n. https://www.wiso-net.de/document/ICT__106177441 (GlobeNewswire) - ScientiaMobile added a new product to the Amazon Web Services (AWS) Marketplace making it the first product on the marketplace to offer device detection. ScientiaMobiles WURFL Microservice enables companies and public sector organizations to improve their web optimization, advertising, and analytics. WURFL Microservice delivers highly accurate device intelligence to enterprises embracing a microservice architecture. Not only is WURFL the most accurate solution in the industry (more than 99 percent accurate) with weekly updates, but it also has the most complete library with over 54,000 devices. WURFL delivers fast performance that effectively scales on multi-core EC2 processor servers. Many large organizations are looking to or adopting a microservice architecture. Embracing the new paradigm was the obvious route to follow for ScientiaMobile, so we followed it, said Luca Passani, chief technology officer, ScientiaMobile. Adding, WURFL Microservice provides a quickly-deployable device detection subsystem that allows other components in a microservice architecture to obtain device properties. While WURFL Microservice uses REST under the hood, customers will use their favorite programming languages and enjoy performances on par with our traditional in-memory APIs. We believe this to be the best of both worlds. WURFL Microservice is available for purchasein Basic, Standard, and Professional plans developed to provide device intelligence to organizations interested in web optimization, advertising technology (AdTech), and device analytics. Basic is geared to for firms looking to improve their web optimization, Standard is suited for advertising use-cases, and Professional would be ideal for analytics utilization. WURFL Microservice has support for five different programming languages including GO (Golang), Java, .NET (C#), Node.js, and PHP. Benefits Achieves 99.9 percent accuracy in device detectionthrough automatic weekly updatesto a library containin ScientiaMobile Launches WURFL Microservice on Amazon Web Service Marketplace (GlobeNewswire) - ScientiaMobile added a new product to the Amazon Web Services (AWS) Marketplace making it the first product on the marketplace to offer device detection. ScientiaMobiles WURFL Microservice enables companies and public sector organizations to improve their web optimization, advertising, and analytics. WURFL Microservice delivers highly accurate device intelligence to enterprises embracing a microservice architecture. Not only is WURFL the most accurate solution in the industry (more than 99 percent accurate) with weekly updates, but it also has the most complete library with over 54,000 devices. WURFL delivers fast performance that effectively scales on multi-core EC2 processor servers. Many large organizations are looking to or adopting a microservice architecture. Embracing the new paradigm was the obvious route to follow for ScientiaMobile, so we followed it, said Luca Passani, chief technology officer, ScientiaMobile. Adding, WURFL Microservice provides a quickly-deployable device detection subsystem that allows other components in a microservice architecture to obtain device properties. While WURFL Microservice uses REST under the hood, customers will use their favorite programming languages and enjoy performances on par with our traditional in-memory APIs. We believe this to be the best of both worlds. WURFL Microservice is available for purchasein Basic, Standard, and Professional plans developed to provide device intelligence to organizations interested in web optimization, advertising technology (AdTech), and device analytics. Basic is geared to for firms looking to improve their web optimization, Standard is suited for advertising use-cases, and Professional would be ideal for analytics utilization. WURFL Microservice has support for five different programming languages including GO (Golang), Java, .NET (C#), Node.js, and PHP. Benefits Achieves 99.9 percent accuracy in device detectionthrough automatic weekly updatesto a library containing 54,000 device models of smartphones, tablets, desktops, smartTVs, and game consoles. Basic set of 13 WURFL capabilities. Ideally suited for mobile-optimized applications. Standard set of 25 WURFL capabilities. Ideally suited for advertising, AdTech, or mobile-optimized applications. Professional set of 41 WURFL capabilities. Ideally suited for analytics, advertising, advanced AdTech, or mobile-optimized applications. Professional edition users can simultaneously use GO (Golang), Java, .NET (C#), Node.js, or PHP to integrate WURFL Professional with their applications. How to Install WURFL Microservice on AWShttps://www.youtube.com/watch?v=FxQO0PiePo0&f About ScientiaMobileScientiaMobiles customers, including Google and Facebook, use WURFL device intelligence solutions to deliver great web experiences, faster image downloads, and improve sales conversions from mobile customers. ScientiaMobile leads the industry in terms of accuracy, speed, and innovation. ScientiaMobiles suite of device intelligence products (WURFL OnSite, WURFL InFuze, WURFL Microservice, WURFL.js, ImageEngine and WURFL InSight) helps Fortune 500 enterprises effectively design and analyze web experiences for an ever-growing range of smartphones, tablets, smart TVs, IOT devices, and game consoles. Contact Information:Bethany Libusbethany@scientiamobile.comDirect: 703-310-6650 Ext. 118ScientiaMobile HQ11180 Sunrise Valley DriveSuite 220Reston, VA 20191 A video accompanying this announcement is available athttp://www.globenewswire.com/NewsRoom/AttachmentNg/837ada4d-a4e2-43e7-a287-8af2cc758200 (c) 2017 Global Data Point. All Rights Reserved. Provided by SyndiGate Media Inc. (<a href=\"http://syndigate.info\">Syndigate.info</a> ). ICT Monitor Worldwide"],"facet_avail":["Online"],"format":["ElectronicArticle"],"fullrecord":"blob:ai-48-SUNUX18xMDYxNzc0NDE","id":"ai-48-SUNUX18xMDYxNzc0NDE","institution":["DE-Pl11"],"imprint":"2017","mega_collection":["Genios (Technik)"],"publishDateSort":"2017","record_id":"106177441","recordtype":"ai","series":["ICT Monitor Worldwide"],"spellingShingle":["ICT Monitor Worldwide","ScientiaMobile Launches WURFL Microservice on Amazon Web Service Marketplace","n.n."],"source_id":"48","title":"ScientiaMobile Launches WURFL Microservice on Amazon Web Service Marketplace","title_full":"ScientiaMobile Launches WURFL Microservice on Amazon Web Service Marketplace","title_fullStr":"ScientiaMobile Launches WURFL Microservice on Amazon Web Service Marketplace","title_full_unstemmed":"ScientiaMobile Launches WURFL Microservice on Amazon Web Service Marketplace","title_short":"ScientiaMobile Launches WURFL Microservice on Amazon Web Service Marketplace","title_sort":"scientiamobile launches wurfl microservice on amazon web service marketplace","topic":["n.n."],"url":["https://www.wiso-net.de/document/ICT__106177441"],"publishDate":["2017-01-01"],"physical":[""],"description":"","container_title":"ICT Monitor Worldwide","format_de105":["Article, E-Article"],"format_de14":["Article, E-Article"],"format_de15":["Article, E-Article"],"format_de520":["Article, E-Article"],"format_de540":["Article, E-Article"],"format_dech1":["Article, E-Article"],"format_ded117":["Article, E-Article"],"format_degla1":["E-Article"],"format_del152":["Buch"],"format_del189":["Article, E-Article"],"format_dezi4":["Article"],"format_dezwi2":["Article, E-Article"],"format_nrw":["Article, E-Article"],"branch_nrw":["Electronic Resources"],"_version_":1615859435059544066,"geogr_code":["not assigned"],"last_indexed":"2018-10-31T16:34:00.06Z","geogr_code_person":["not assigned"],"finc_class_facet":["not assigned"]}
{"access_facet":"Electronic Resources","spelling":["n.n. https://www.wiso-net.de/document/ICT__116462729 (PRWeb) - The Chicago Gophers, an active group of over 500 Go programmers, have selected Sphere Software Engineer Daniel Podolsky to give a presentation at their next meetup. Titled Measure your app: Statsd, prometheus and their marriage, Podolskys presentation will be hosted at MediaMaths headquarters (445 N Wells St, Chicago) on Tuesday, May 15 at 6:00 pm. Were excited to have Daniel represent us at this event, said Sphere Software CEO Leon Ginsburg. As a Chicago-based company, we feel it`s our duty to contribute thought leadership to the local Go community. As a former Golang developer for companies like Arilot, Kuberstack, and a Golang team lead at QArea, Podolsky brings a broad range of Golang experience to the table. In his presentation, Podolsky will show how to report in-app metrics. Metrics help developers to profile, monitor and debug their apps (especially heavy concurrent ones). He focuses on efficient and cost-effective ways to report, collect, store and display the in-app metrics. Im excited to share this talk with the Chicago Gophers, Podolsky said. Since Go is still a young programming language, its up to each of us to share our knowledge and nurture its growth. Prior to Daniels presentation, guests can enjoy a meet-and-greet, as well as free beer and pizza, compliments of MediaMath. About Sphere Software With headquarters in Chicago and regional offices in New York, Miami, Buenos Aires, Russia, Ukraine, and Belarus, Sphere Software is a global company with a local focus and a national presence. Sphere Software has over a decade of proven success creating innovative web and mobile software solutions, big data analytics and providing staff augmentation for both start-ups and the Fortune 100. Our consulting services includes DevOps and the Atlassian product suite. Spheres technical expertise includes Go, Python, React.js, Node.js, Ruby on Rails, Scala and Clojure, and a broad range of industry experience as well. To find out how Sphere Software can he Sphere Software Engineer Daniel Podolsky to Present a Talk at The Chicago Gophers Meetup (PRWeb) - The Chicago Gophers, an active group of over 500 Go programmers, have selected Sphere Software Engineer Daniel Podolsky to give a presentation at their next meetup. Titled Measure your app: Statsd, prometheus and their marriage, Podolskys presentation will be hosted at MediaMaths headquarters (445 N Wells St, Chicago) on Tuesday, May 15 at 6:00 pm. Were excited to have Daniel represent us at this event, said Sphere Software CEO Leon Ginsburg. As a Chicago-based company, we feel it`s our duty to contribute thought leadership to the local Go community. As a former Golang developer for companies like Arilot, Kuberstack, and a Golang team lead at QArea, Podolsky brings a broad range of Golang experience to the table. In his presentation, Podolsky will show how to report in-app metrics. Metrics help developers to profile, monitor and debug their apps (especially heavy concurrent ones). He focuses on efficient and cost-effective ways to report, collect, store and display the in-app metrics. Im excited to share this talk with the Chicago Gophers, Podolsky said. Since Go is still a young programming language, its up to each of us to share our knowledge and nurture its growth. Prior to Daniels presentation, guests can enjoy a meet-and-greet, as well as free beer and pizza, compliments of MediaMath. About Sphere Software With headquarters in Chicago and regional offices in New York, Miami, Buenos Aires, Russia, Ukraine, and Belarus, Sphere Software is a global company with a local focus and a national presence. Sphere Software has over a decade of proven success creating innovative web and mobile software solutions, big data analytics and providing staff augmentation for both start-ups and the Fortune 100. Our consulting services includes DevOps and the Atlassian product suite. Spheres technical expertise includes Go, Python, React.js, Node.js, Ruby on Rails, Scala and Clojure, and a broad range of industry experience as well. To find out how Sphere Software can help your business reach peak performance, connect with us on Twitter @SphereSW, LinkedIn, or Facebook, or contact us on our website at http://www.sphereinc.com. (c) 2018 Global Data Point. All Rights Reserved. Provided by SyndiGate Media Inc. (<a href=\"http://syndigate.info\">Syndigate.info</a> ). ICT Monitor Worldwide"],"facet_avail":["Online"],"format":["ElectronicArticle"],"fullrecord":"blob:ai-48-SUNUX18xMTY0NjI3Mjk","id":"ai-48-SUNUX18xMTY0NjI3Mjk","institution":["DE-Pl11"],"imprint":"2018","mega_collection":["Genios (Technik)"],"publishDateSort":"2018","record_id":"116462729","recordtype":"ai","series":["ICT Monitor Worldwide"],"spellingShingle":["ICT Monitor Worldwide","Sphere Software Engineer Daniel Podolsky to Present a Talk at The Chicago Gophers Meetup","n.n."],"source_id":"48","title":"Sphere Software Engineer Daniel Podolsky to Present a Talk at The Chicago Gophers Meetup","title_full":"Sphere Software Engineer Daniel Podolsky to Present a Talk at The Chicago Gophers Meetup","title_fullStr":"Sphere Software Engineer Daniel Podolsky to Present a Talk at The Chicago Gophers Meetup","title_full_unstemmed":"Sphere Software Engineer Daniel Podolsky to Present a Talk at The Chicago Gophers Meetup","title_short":"Sphere Software Engineer Daniel Podolsky to Present a Talk at The Chicago Gophers Meetup","title_sort":"sphere software engineer daniel podolsky to present a talk at the chicago gophers meetup","topic":["n.n."],"url":["https://www.wiso-net.de/document/ICT__116462729"],"publishDate":["2018-01-01"],"physical":[""],"description":"","container_title":"ICT Monitor Worldwide","format_de105":["Article, E-Article"],"format_de14":["Article, E-Article"],"format_de15":["Article, E-Article"],"format_de520":["Article, E-Article"],"format_de540":["Article, E-Article"],"format_dech1":["Article, E-Article"],"format_ded117":["Article, E-Article"],"format_degla1":["E-Article"],"format_del152":["Buch"],"format_del189":["Article, E-Article"],"format_dezi4":["Article"],"format_dezwi2":["Article, E-Article"],"format_nrw":["Article, E-Article"],"branch_nrw":["Electronic Resources"],"_version_":1615859445408989185,"geogr_code":["not assigned"],"last_indexed":"2018-10-31T16:34:10.511Z","geogr_code_person":["not assigned"],"finc_class_facet":["not assigned"]}
{"access_facet":"Electronic Resources","author":["Michael Stal"],"spellingShingle":["Michael Stal","iX","Alle zusammen","n.n."],"author_sort":"michael stal","spelling":["Michael Stal 0935-9680 n.n. https://www.wiso-net.de/document/IX__1528693331343005 <genios:image filename=\"IX/2018/1528693331343005/image-1527236629464741.jpg\"></genios:image> Nach wie vor dominieren in der systemnahen Embedded-Programmierung die verbreiteten Programmiersprachen C und C++. Das gilt auch für IoT-Geräte, wenngleich dort mittlerweile auch andere Programmiersprachen ihr Potenzial demonstrieren. Und nicht zuletzt in der Industrie 4.0 spielen mehrere Sprachen eine wichtige Rolle, speziell wenn es um Dienste und Anwendungen geht. Denn Apps oder Cloud- und Container-basierte Microservices schreiben Entwickler lieber in Java, C#, Swift oder Python. Allen Unkenrufen zum Trotz fußt der häufige Einsatz von C oder C++ im Embedded-Umfeld darauf, dass diese Sprachen sich leicht lernen und systemnah einsetzen lassen. Genau dafür haben ihre Schöpfer sie konzipiert. Außerdem stellen Betriebssysteme ihre APIs meist ausschließlich in C und C++ zur Verfügung. Das ist auch kein Wunder, da die überwiegende Mehrheit der Embedded-Betriebssysteme selbst in C oder C++ vorliegt. Durch ihre systemnahe Ausrichtung und die damit einhergehenden Freiheitsgrade können C und C++ jedoch die Produktivität hemmen, speziell wenn es um App-, Desktop-, Web- und Serverentwicklung geht. Dort gelten Sprachen wie Java oder sogar das bisweilen verpönte JavaScript als erste Wahl. Selbst in der Embedded-Entwicklung existieren inzwischen moderne Alternativen wie Rust oder Google Go. <genios:zwtitel level=\"3\">Vor Ort oder aus der Entfernung </genios:zwtitel> <genios:image filename=\"IX/2018/1528693331343005/sun.skriptsprachen.Z1.jpg\">Die steuernde Anwendung sitzt direkt auf der Embedded-Hardware und greift auf diese zu (Abb. 1). </genios:image> Bevor die Sprachen näher auf ihre Eignung hin untersucht werden sollen, ist die Frage zu beantworten, wie sich die Anwendungen steuern lassen. Hierzu gibt es grundsätzlich zwei Modelle. Im ersten steuert ein Programm beziehungsweise eine Firmware, die direkt auf der Embedded-Hardware läuft und Alle zusammen <genios:image filename=\"IX/2018/1528693331343005/image-1527236629464741.jpg\"></genios:image> Nach wie vor dominieren in der systemnahen Embedded-Programmierung die verbreiteten Programmiersprachen C und C++. Das gilt auch für IoT-Geräte, wenngleich dort mittlerweile auch andere Programmiersprachen ihr Potenzial demonstrieren. Und nicht zuletzt in der Industrie 4.0 spielen mehrere Sprachen eine wichtige Rolle, speziell wenn es um Dienste und Anwendungen geht. Denn Apps oder Cloud- und Container-basierte Microservices schreiben Entwickler lieber in Java, C#, Swift oder Python. Allen Unkenrufen zum Trotz fußt der häufige Einsatz von C oder C++ im Embedded-Umfeld darauf, dass diese Sprachen sich leicht lernen und systemnah einsetzen lassen. Genau dafür haben ihre Schöpfer sie konzipiert. Außerdem stellen Betriebssysteme ihre APIs meist ausschließlich in C und C++ zur Verfügung. Das ist auch kein Wunder, da die überwiegende Mehrheit der Embedded-Betriebssysteme selbst in C oder C++ vorliegt. Durch ihre systemnahe Ausrichtung und die damit einhergehenden Freiheitsgrade können C und C++ jedoch die Produktivität hemmen, speziell wenn es um App-, Desktop-, Web- und Serverentwicklung geht. Dort gelten Sprachen wie Java oder sogar das bisweilen verpönte JavaScript als erste Wahl. Selbst in der Embedded-Entwicklung existieren inzwischen moderne Alternativen wie Rust oder Google Go. <genios:zwtitel level=\"3\">Vor Ort oder aus der Entfernung </genios:zwtitel> <genios:image filename=\"IX/2018/1528693331343005/sun.skriptsprachen.Z1.jpg\">Die steuernde Anwendung sitzt direkt auf der Embedded-Hardware und greift auf diese zu (Abb. 1). </genios:image> Bevor die Sprachen näher auf ihre Eignung hin untersucht werden sollen, ist die Frage zu beantworten, wie sich die Anwendungen steuern lassen. Hierzu gibt es grundsätzlich zwei Modelle. Im ersten steuert ein Programm beziehungsweise eine Firmware, die direkt auf der Embedded-Hardware läuft und auf diese zugreift, die Funktionen einschließlich Aktoren und Sensoren (siehe Abbildung 1). <genios:image filename=\"IX/2018/1528693331343005/sun.skriptsprachen.Z2.jpg\">Beim Master-Slave- oder Gateway-Modell führt eine Firmware auf dem eingebetteten System die Aufträge einer entfernten Hostanwendung aus (Abb. 2). </genios:image> Im zweiten Modell, dem Master-Slave- oder Gateway-Modell, befindet sich auf dem eingebetteten System eine vermittelnde Firmware, die mit einem Host kommuniziert und im Auftrag einer Hostanwendung Zugriffe auf die Gerätehardware inklusive Aktorik und Sensorik durchführt (siehe Abbildung 2). Die eigentliche Anwendung läuft also auf dem Host und kommuniziert mit der Firmware des angeschlossenen Geräts, die wiederum auf dessen Komponenten, insbesondere auf die Ein- und Ausgabeports sowie die Busse wie I<genios:style type=\"sup\">2 </genios:style>C, I<genios:style type=\"sup\">2 </genios:style>S, SPI, CAN oder UART zugreift. Ein Beispiel hierfür ist das für Arduino-Boards konzipierte Firmata. <genios:kasten><genios:zwtitel level=\"3\">Listing 1: Go - LED-Blinken auf dem BeagleBone </genios:zwtitel><genios:code>package main import ( &quot;time&quot; &quot;gobot.io/x/gobot&quot; &quot;gobot.io/x/gobot/drivers/gpio&quot; &quot;gobot.io/x/gobot/platforms/beaglebone&quot; ) func main() { beagleboneAdaptor := beaglebone.NewAdaptor() led := gpio.NewLedDriver(beagleboneAdaptor, &quot;P9_12&quot;) work := func() { gobot.Every(1*time.Second, func() { led.Toggle() }) } robot := gobot.NewRobot(&quot;blinker&quot;, []gobot.Connection{beagleboneAdaptor}, []gobot.Device{led}, work, ) robot.Start() } </genios:code> </genios:kasten> <genios:kasten><genios:zwtitel level=\"3\">Listing 2: JavaScript - Stepper-Motor antreiben </genios:zwtitel><genios:code>var five = require(&quot;johnny-five&quot;); var board = new five.Board(); board.on(&quot;ready&quot;, function() { var stepper = new five.Stepper({ type: five.Stepper.TYPE.DRIVER, stepsPerRev: 200, pins: { step: 12, dir: 11 } }); // Volle 10 Drehungen gegen Uhrzeigersinn bei // 180 rpm mit Beschleunigung und Abbremsung stepper.rpm(180).ccw().accel(1600).decel(1600).step(2000, function() { console.log(&quot;Erste Bewegung beendet&quot;); // Ist die Bewegung abgeschlossen, erfolgen 10 Umdrehungen // im Uhrzeigersinn mit zuvor festgelegter Geschwindigkeit, // Abbrems- und Beschleunigungsverhalten stepper.step({ steps: 2000, direction: five.Stepper.DIRECTION.CW }, function() { console.log(&quot;Komplette Bewegung beendet&quot;); }); }); }); </genios:code> </genios:kasten> Im Master-Slave-Modell erstellen Entwickler ihre Hostanwendungen in allen möglichen Sprachen. Für JavaScript gibt es für diese Aufgabe das unter Node.js nutzbare Framework Johnny-Five, für Google Go das Framework Gobot. Listing 1 zeigt, wie sich unter Gobot auf einem BeagleBone eine LED zum Blinken bringen lässt. Unter dem Framework Johnny-Five würde sich ein JavaScript-Programm, das einen Stepper-Motor auf Basis von Firmata antreibt, wie in Listing 2 gestalten. Die Vorstellung räumlich getrennter Master-Slave-Paare trifft die Wirklichkeit allerdings nur selten. Auf leistungsfähigen Geräten wie dem Raspberry Pi können Host (Master) und Mikrocontroller (Slave) unter einem Dach beziehungsweise auf einer Platine vereint und über eine Brücke direkt miteinander verbunden sein. So reizvoll das Master-Slave-Modell auch erscheinen mag, hat es für Industrieanwendungen nur eine untergeordnete Bedeutung. Interessanter ist das erste Modell, bei dem die Anwendung auf der Embedded-Hardware läuft und direkt auf sie zugreift, entweder als Bare-Metal-Programm oder über ein Betriebssystem. Deshalb konzentriert sich der Artikel auf diese beiden Konstellationen. <genios:zwtitel level=\"3\">Eine lange Wunschliste </genios:zwtitel> Vor jedem Sprachenvergleich gilt es aber, das Anforderungsprofil zu erstellen. Die Sprache sollte die Anwendung in die Lage versetzen, direkt und effizient auf die Hardwarekomponenten des Embedded-Boards zuzugreifen - das Zauberwort heißt hier \"Low Level I/O\". Das gilt auch für die Behandlung hardwarenaher Interrupts und Timer. Dazu gehören ebenfalls eine nahtlose Zusammenarbeit mit dem Betriebssystem und die Integration der Komponenten oder Bibliotheken über C/C++-Schnittstellen. Für ein IIoT-Projekt dürfte es essenziell sein, ob die Programmiersprache überhaupt auf den gewünschten Zielplattformen läuft oder sich mit wenig Aufwand portieren lässt. Die Implementierung der Sprache, also der erzeugte Code und das gesamte Laufzeitsystem, muss gut mit den vorhandenen Ressourcen haushalten. Im Embedded-Umfeld hat die Bill of Materials (BoM) - die strukturierte Stückliste - ein entscheidende Bedeutung. Safe Programming schützt Entwickler vor fahrlässiger Komplexität, indem sie ungewünschte Seiteneffekte wie versehentliches Überschreiben von Speicher verhindert. Auf der anderen Seite darf die Sprache den Programmierer nicht in ein zu enges Korsett zwängen. Die Nebenläufigkeit ist auf heutigen Mehrkernsystemen ein wichtiger Faktor. Nicht nur auf Echtzeitsystemen muss die Sprache ein deterministisches Scheduling ermöglichen. Ein breites Spektrum von Kommunikationsmechanismen gewährleistet die interne Kommunikation und Koordination zwischen Tasks, aber auch die externe Kommunikation mit anderen IoT-Knoten und Backend-Diensten. Im industriellen Kontext gehört die möglichst einfache Testbarkeit zu den entscheidenden Grundpfeilern. Hier ist darauf zu achten, dass sie sich über mehrere Entitäten erstreckt, also über IIoT-Geräte, Backend-Dienste und Anwendungen. Schließlich ist ein IIoT-Gerät keine einsame Insel. Zu den wichtigen Qualitätsattributen zählt die Sicherheit. Die Sprache selbst und die Bibliotheken müssen über einen entsprechenden Funktionsumfang verfügen. Daneben sind auch nichttechnische Faktoren zu beachten wie die Unterstützung durch Dritthersteller, die notwendige Lernkurve und die Verfügbarkeit leistungsfähiger Entwicklungswerkzeuge. <genios:zwtitel level=\"3\">Darf es etwas mehr sein? </genios:zwtitel> Eine Programmiersprache, die sich an der obigen Wunschliste orientiert, ist Rust. Mozilla war für die Kreation dieser Multiparadigmen-Sprache verantwortlich, die sich zugleich als Systemprogrammierungssprache positioniert. Zu den unterstützten Paradigmen gehören die imperative, funktionale, objektorientierte, parallele und generische Programmierung. Da Rust aber den Entwickler nicht unnötig einschränken will, lässt sie innerhalb von <genios:style type=\"italic\">unsafe </genios:style>-Blöcken auch beliebige Seiteneffekte zu, etwa den Speicherzugriff mit Zeigern nach Art von C/C++ oder das Einbinden von Assembler-Anweisungen. Den Code übersetzt der Compiler <genios:style type=\"italic\">rustc </genios:style>in unter LLVM lauffähige Kompilate. Um Rust effizient zu halten, folgten die Sprachdesigner dem Zero-Cost-Abstractions-Prinzip, demzufolge Abstraktionen zur Laufzeit nur wenig kosten dürfen. Einen Garbage Collector bietet Rust nicht, dafür aber zahlreiche Mechanismen, die die Program Safety erhöhen. Gegenüber C/C++ und Go stechen dabei die stringenten Regeln zur Ownership von Daten hervor. Gerade diese Ownership-Prinzipien erschweren beim Einstieg das Verständnis, sind aber auch ein gutes Mittel, um Safety-Verletzungen durch ungewollte Seiteneffekte zu verhindern. Hat der Entwickler erst einmal den Dreh raus, lernt er diese Mechanismen zu schätzen. Dass Rust sich gut für eingebettete Systeme eignet, beweisen Open-Source-Projekte wie Tock Embedded OS, die selbst in Rust geschrieben sind und auf die Programmierung von IoT-Geräten mit wenig Speicher und wenig Energieverbrauch zielen. zinc.rs wiederum implementiert einen experimentellen ARM-Stack als Alternative zu mbed und CMSIS, ohne dabei groß auf Assembler- oder C-Code zurückzugreifen, unterstützt momentan aber hauptsächlich STM32F407-Boards. Auf zinc.rs zeigt das Projekt in einem Programmbeispiel, wie sich mit Rust zwei LEDs wechselseitig ein- und ausschalten lassen. Weitere Hands-on zum Kennenlernen von Rust siehe ix.de/ix1813086. <genios:zwtitel level=\"3\">Go, Google, Go </genios:zwtitel> <genios:kasten><genios:zwtitel level=\"3\">Listing 3: Go - zwei Goroutinen kommunizieren über einen Channel </genios:zwtitel><genios:code>package main import &quot;fmt&quot; func main() { // Channel vom Typ int kreieren: msgs := make(chan int) // Neue Goroutine starten, die eine // Nachricht in Channel schreibt go func() { msgs &lt;- 42 }() // Nachricht empfangen msg := &lt;-msgs fmt.Println(msg) } </genios:code> </genios:kasten> Go ist ein weiterer Kandidat, der C/C++ vom Thron stoßen möchte. Google veröffentlichte die Sprache 2012. Sie folgt wie Rust mehreren Paradigmen, etwa dem der objektorientierten Programmierung. Allerdings implementiert Go keine Klassen, sondern Interfaces und Structs, also Schnittstellen und Verbunde. Zu ihren Entwicklungszielen gehörten die Netzwerkfähigkeit sowie die Eignung fürs Cluster- und Cloud-Computing ebenso wie das Vermeiden der Ineffizienz von C++-Compilern. Zur Schaffung von Parallelität greift Go auf Goroutinen zurück, die über Channels miteinander kommunizieren (siehe Listing 3). Für periodische Aktivitäten eignen sich Ticker beziehungsweise Timer. Zwar kennt Go Zeiger, aber zur Programmiersicherheit weder solche auf beliebige Adressen noch eine Zeigerarithmetik. Die berüchtigten Buffer Overflows führen zum Programm-Crash statt zur Sicherheitsverletzung. Nicht zuletzt enthält die Laufzeitumgebung einen nebenläufigen Mark&Sweep-Garbage Collector, dessen Automatik sich abstellen lässt. Für stark ressourceneingeschränkte Geräte eignet sich Go nicht, weil übersetzte Programme im Vergleich zu Rust oder C/C++ relativ viel Platz einnehmen. Trotzdem gibt es einige Projekte, die Go im Embedded-Umfeld nutzen. Go ist die Basis von embd. Dieses Golang Embedded Programming Framework bietet einen HAL (Hardware Abstraction Layer) für ARM-basierte Hosts, der als Schnittstelle zu Linux-Treibern dient, mit deren Hilfe Programme auf GPIO, SPIO oder I<genios:style type=\"sup\">2 </genios:style>C zugreifen. embd läuft von Haus aus auf Raspberry Pi und BeagleBone, ist aber per Plug-ins auf weitere Plattformen portierbar. Mit dem Cross-Compiler können Entwickler ihre Programme auf dem Mac oder PC übersetzen und direkt auf die Zielhardware überspielen. <genios:kasten><genios:zwtitel level=\"3\">Listing 4: Go - Zugriff auf den Bosch-Sensor BMP180 über den I²C-Bus </genios:zwtitel><genios:code>// +build ignore package main import ( &quot;flag&quot; &quot;fmt&quot; &quot;time&quot; &quot;github.com/kidoman/embd&quot; &quot;github.com/kidoman/embd/sensor/bmp180&quot; _ &quot;github.com/kidoman/embd/host/all&quot; ) func main() { flag.Parse() // err != nil =&gt; Fehler aufgetreten // defer wird auf jeden Fall durchgeführt if err := embd.InitI2C(); err != nil { panic(err) } defer embd.CloseI2C() bus := embd.NewI2CBus(1) baro := bmp180.New(bus) defer baro.Close() for { temp, err := baro.Temperature() if err != nil { panic(err) } fmt.Printf(&quot;Temperatur = %v\\n&quot;, temp) pressure, err := baro.Pressure() if err != nil { panic(err) } fmt.Printf(&quot;Luftdruck ist %v\\n&quot;, pressure) altitude, err := baro.Altitude() if err != nil { panic(err) } fmt.Printf(&quot;Die Höhe beträgt %v\\n&quot;, altitude) time.Sleep(5000 * time.Millisecond) } } </genios:code> </genios:kasten> Das Go-Programm für embd in Listing 4 illustriert den Zugriff auf den Bosch-Sensor BMP180 über den I<genios:style type=\"sup\">2 </genios:style>C-Bus. Dieser Sensor liefert neben der Temperatur den Luftdruck und die Höhe. Das Programm ruft alle fünf Sekunden die Messwerte des Sensors ab. Wer mit Go experimentieren möchte, kann entweder die Toolchain lokal installieren oder online auf der Webseite arbeiten (siehe ix.de/ix1813086). <genios:zwtitel level=\"3\">Noch nicht ganz reif </genios:zwtitel> Grundsätzlich eignet sich sowohl Go als auch Rust zum Programmieren von IIoT-Geräten. Dabei hat Rust bei der Programmiersicherheit und Effizienz einige Vorteile gegenüber Go. Das gilt besonders für Anwendungen mit stringenten Qualitätsanforderungen etwa an die Echtzeitfähigkeit und Nebenläufigkeit. Allerdings sind die heutigen IoT-Plattformen im experimentellen Stadium und oft nur für Hobby-Boards verfügbar. Für die Anwendung im IIoT sind Rust und Go noch nicht reif. Zu bedenken ist auch, dass die Industrie standardisierte Protokolle verwendet, die zu integrieren sind. Beispiele hierfür sind BACnet bei der Gebäudeautomatisierung oder OPC UA plus TSN für die Industrieautomatisierung. Geeignete Implementierungen müssten daher auch Rust- und Go-basierte Laufzeitumgebungen bieten oder diese zumindest über C/C++-APIs einbinden. Dasselbe gilt für IoT-Protokolle wie MQTT und CoAP zur industriellen M2M-Kommunikation. Dass Industrieanwendungen nicht auf der grünen Wiese entstehen, sondern sich in vorhandene Infrastrukturen einfügen müssen, die meist eine C/C++-Vorgeschichte haben, bildet eine weitere Hürde. Hier sind entsprechende Schnittstellen zu existierenden Soft- und Hardwarekomponenten zu schaffen und die bisherigen Werkzeugsammlungen einzubeziehen. Für eine tief greifende Integration ins Automatisierungsumfeld eignen sich daher Go und Rust momentan weniger - eher für funktionale Erweiterungen, die beispielsweise eine IoT-basierte Datenanalytik betreiben, ohne in die Automatisierungsprozesse einzugreifen. <genios:zwtitel level=\"3\">Reine Interpretationssache </genios:zwtitel> <genios:kasten><genios:zwtitel level=\"3\">Listing 5: Lua - Temperatursensor auslesen </genios:zwtitel><genios:code>t=require(&quot;ds18b20&quot;) -- Es ist ein DS18B20-Sensor angeschlossen t.setup(9) addrs=t.addrs() print(table.getn(addrs)) -- Der gefundene Sensor DS18B20 print(t.read(addrs[1],t.C)) print(t.read(addrs[1],t.F)) print(t.read(addrs[1],t.K)) -- Messung auslesen print(t.read()) -- Messung in Celsius print(t.read(nil,t.C)) -- freigeben t = nil ds18b20 = nil package.loaded[&quot;ds18b20&quot;]=nil </genios:code> </genios:kasten> Neben Compilersprachen wie C/C++, Rust und Go ließen sich auch dynamische Interpretersprachen einsetzen. Deren Ausführung auf Mikrocontroller-Boards bietet Vorteile in der Flexibilität und beim Prototyping. Im IoT spielt vor allem Python und danach mit größerem Abstand JavaScript eine wichtige Rolle, wobei es durchaus Unterstützung für exotischere Sprachen wie Lua oder Ruby gibt. Beispielsweise kann man mit ESP32- oder ESP8266-Boards des Typs NodeMCU mit Lua günstige Sensorknoten erstellen. Das Lua-Skript in Listing 5, das einen Temperatursensor ausliest, veranschaulicht das. <genios:kasten><genios:zwtitel level=\"3\">Listing 6: MicroPython - alle Temperatursensoren abfragen </genios:zwtitel><genios:code>import time import machine import onewire # Sensor liegt an GPIO12 dat = machine.Pin(12) # OneWire-Prokoll vorbereiten: ds = onewire.DS18B20(onewire.OneWire(dat)) # Alle Geräte scannen roms = ds.scan() print('Geräte gefunden:', sensors) # 6 mal durchlaufen for i in range(6): print('temperatures:', end=' ') ds.convert_temp() time.sleep_ms(750) for sensor in sensors: print(ds.read_temp(sensor), end=' ') print() </genios:code> </genios:kasten> Ähnliche Aufgaben lassen sich auch in MicroPython erledigen. In Listing 6 ermittelt das Programm die Messwerte aller angeschlossenen Temperatursensoren. <genios:kasten><genios:zwtitel level=\"3\">Listing 7: JavaScript - jede Minute den Temperatursensor DS18B20 abfragen </genios:zwtitel><genios:code>var owire = new OneWire(A1); var sensor = require(&quot;DS18B20&quot;).connect(owire); setInterval(function() { sensor.getTemp(function (temp) { console.log(&quot;Temp is &quot;+temp+&quot;°C&quot;); }); }, 60000); </genios:code> </genios:kasten> Embedded-Boards wie Tessel und Espruino haben einen JavaScript-Interpreter an Bord. Auf Letzterem könnte der Zugriff auf den Temperatursensor DS18B20 einmal pro Minute wie in Listing 7 aussehen. Eine Kombination aus IoT-Betriebssystem und JavaScript-Interpreter bietet die Linux Foundation mit dem Betriebssystem Zephyr und der dazugehörigen JavaScript-Runtime JerryScript. Zephyr ist ein Open-Source-Echtzeitbetriebssystem, das auf unterschiedlichen Hardwareplattformen läuft (siehe Artikel \"Zuverlässig\" auf Seite 138). JerryScript implementiert ECMScript 5 und läuft auf Geräten, die gerade einmal 64 KByte RAM oder 200 KByte ROM aufbieten können. Ein JavaScript-Programmierbeispiel, das bei Erreichen einer bestimmten Lichtintensität einen Lichtfilter aktiviert, findet sich im Online-Blog des Zephyr-Projekts (siehe ix.de/ix1813086). Charmant an Skriptsprachen wie Python, JavaScript oder Lua ist das schnelle Prototyping, ebenso wie das dynamische Erzeugen, Versenden und Interpretieren von Code. Da speziell JavaScript und Python auch auf Servern, Desktops und Mobilgeräten weit verbreitet sind, lässt sich so die Zahl der verwendeten Sprachen gering halten. JavaScript bildet auch die Grundlage des Programmierwerkzeugs Node-RED, dessen browserbasierter Editor die Kontroll- und Datenflüsse verschiedener IoT-Knoten grafisch zusammenbindet. Auch deshalb erscheint JavaScript für IIoT-Ökosysteme geradezu prädestiniert. Zudem unterstützt es die Kommunikation über CoAP/REST gut. <genios:zwtitel level=\"3\">Nicht ohne Nachteile </genios:zwtitel> Dafür bietet Python die wesentlich \"sauberere\" Programmiersprache. Subsets von Python wie MicroPython reduzieren den Sprachumfang auf das für IIoT-Anwendungen notwendige Maß und lassen sich selbst auf ressourcenarmen Knoten unterbringen. Den Vorteilen dynamischer Sprachen stehen gewichtige Nachteile gegenüber. So kompakt und effizient wie C/C++, Rust oder Go können dynamische Sprachen konzeptionsbedingt nicht sein. Dass manche Fehler nicht schon beim Übersetzen, sondern erst zur Laufzeit zuschlagen, mag als eine Frage der Programmierphilosophie erscheinen, kann in industriellen Echtzeitumgebungen aber zu Problemen führen. Für den hardwarenahen Zugriff benötigen Skriptsprachen außerdem Adapter, die überwiegend als C/C++-Schnittstellen zu Hardwarekomponenten vorliegen. Ohne Adapter kein Zugriff. Das gilt auch für die Integration von Industriestandards. Neben den Programmiersprachen spielen weitere Arten von Sprachen eine Rolle im IIoT. Da viele Anwendungen mit einem Webinterface arbeiten, sollten Entwickler HTML5 einschließlich CSS und JavaScript beherrschen. Zudem erlangen in der Industrie domänenspezifische oder anwendungsspezifische Sprachen Bedeutung, die sich auf ein bestimmtes Aufgabenfeld, die sogenannte Domäne, beschränken, daraus aber Systemteile und Konfigurationen generieren. Inzwischen halten auch FPGAs Einzug in IoT-Hardware. Field Programmable Gate Arrays bestehen aus Tausenden von Flip-Flops und davorliegenden kombinatorischen Logikschaltungen. Sie erlauben das Konfigurieren einer logischen Schaltung beim Einschalten des Systems im SRAM oder einem Mikrocontroller. Mit anderen Worten, FPGAs können die Hardware konfigurieren und damit neue Hardwarefunktionen zur Laufzeit bereitstellen. Dazu dienen Sprachen wie Verilog, ABEL oder VHDL (Very High Speed Integrated Circuit Hardware Description Language). Auf wikipedia.org finden sich einfache VHDL-Beispiele. Durchaus möglich, dass zur IoT-Entwicklung künftig auch Hardwarebeschreibungssprachen wie VHDL gehören könnten, auch wenn das nur für einen Teil der Entwickler gelten dürfte. <genios:zwtitel level=\"3\">Zusammenfassung </genios:zwtitel> Welche Sprachen die richtigen fürs IIoT sind, hängt von vielen Faktoren ab. Handelt es sich bei dem IoT-Gerät um ein Add-on zu einer bestehenden Industrieanlage, bei der zum Beispiel Datenanalytik und KI den Schwerpunkt bilden, dann sind grundsätzlich alle Sprachoptionen denkbar, insbesondere die Skriptsprachen. Geht es um die Implementierung bestimmter Funktionen auf dem Gerät etwa mit Steuerungsaufgaben, sollten die Sprachen Faktoren wie Echtzeitfähigkeit, Effizienz, Robustheit und Sicherheit kombinieren. Bei Brownfield-Projekten muss die Software sich in bestehende Komponenten und Standards integrieren, die unter Umständen entsprechende Programmiersprachen erfordern. Greenfield-Projekte erlauben mehr Flexibilität, weil sie auf keine Legacy-Komponenten Rücksicht nehmen müssen. Standards können aber auch hier die Wahl einschränken. Ein Edge-Gerät mit ausreichend Ressourcen bietet zudem andere Optionen als ein 8/16-Bit-Mikrocontroller-Board. Für IoT-Backend-Server in der Cloud eignen sich vor allem Sprachen mit guter Enterprise-Unterstützung wie JVM- und .NET-Sprachen, aber auch Skriptsprachen. Bei HMI-Anwendungen für IoT-Client geben oft betriebssystemabhängige Frameworks den Ausschlag, etwa C# auf Windows, Swift auf macOS/iOS oder Java auf Android-Geräten. Hier ermöglichen Skriptsprachen eine OS-neutrale Entwicklung, etwa Cordova mit JavaScript und HTML5. Selbstredend hängen die gewählten Optionen auch davon ab, welche Kompetenzen vorhanden sind, da man steile Lernkurven vermeiden möchte - und davon, welchen Aufwand die Integration der gewünschten Sprachen in ein IIoT-Ökosystem erfordert. Die gute Nachricht lautet aber, dass heute wesentlich mehr Möglichkeiten zur Auswahl stehen und dass sich die Verständigung in heterogenen Umgebungen mit Standardprotokollen wie MQTT oder CoAP gewährleisten lässt. Trotzdem tun IIoT-Projekte gut daran, die ausgewählten Techniken auf das Minimum zu beschränken und klare Vorgaben zu definieren. (sun@ix.de) <genios:zwtitel level=\"3\">Vita </genios:zwtitel> <genios:style type=\"strong\">Prof. Dr. Michael Stal </genios:style><genios:style type=\"italic\">arbeitet als Principal Engineer in der Corporate Technology der SIEMENS AG. Zudem hat er eine Professur am Software-Engineering-Lehrstuhl der Universität von Groningen inne. </genios:style> <genios:externalLink href=\"http://ix.de/ix1813086\">http://ix.de/ix1813086 </genios:externalLink> iX"],"facet_avail":["Online"],"format":["ElectronicArticle"],"fullrecord":"blob:ai-48-SVhfXzE1Mjg2OTMzMzEzNDMwMDU","id":"ai-48-SVhfXzE1Mjg2OTMzMzEzNDMwMDU","institution":["DE-Pl11"],"imprint":"2018","mega_collection":["Genios (Technik)"],"publishDateSort":"2018","record_id":"1528693331343005","recordtype":"ai","series":["iX"],"source_id":"48","title":"Alle zusammen","title_full":"Alle zusammen","title_fullStr":"Alle zusammen","title_full_unstemmed":"Alle zusammen","title_short":"Alle zusammen","title_sort":"alle zusammen","topic":["n.n."],"url":["https://www.wiso-net.de/document/IX__1528693331343005"],"publishDate":["2018-01-01"],"physical":[""],"description":"","container_issue":"13","container_title":"iX","format_de105":["Article, E-Article"],"format_de14":["Article, E-Article"],"format_de15":["Article, E-Article"],"format_de520":["Article, E-Article"],"format_de540":["Article, E-Article"],"format_dech1":["Article, E-Article"],"format_ded117":["Article, E-Article"],"format_degla1":["E-Article"],"format_del152":["Buch"],"format_del189":["Article, E-Article"],"format_dezi4":["Article"],"format_dezwi2":["Article, E-Article"],"format_nrw":["Article, E-Article"],"branch_nrw":["Electronic Resources"],"_version_":1615856142023393280,"geogr_code":["not assigned"],"last_indexed":"2018-10-31T15:41:41.224Z","geogr_code_person":["not assigned"],"finc_class_facet":["not assigned"]}
{"access_facet":"Electronic Resources","spelling":["0935-9680 n.n. https://www.wiso-net.de/document/IX__2010022546 Softwareentwicklung 134 Go: Googles neue Programmiersprache Ready, steady, ... Frank Müller Anfang November stellte Google der überraschten Öffentlichkeit eine neue Programmiersprache mit dem kurzen Namen Go vor. Obwohl alle Features bereits von anderen Sprachen bekannt sind und Softwareentwickler eher verhalten urteilten, erreichte Go aus dem Stand Platz 13 auf dem TIOBE Index und wurde zur Sprache des Jahres 2009 gekürt. Kaum hatte Google seine neue Programmiersprache vorgestellt, klopfte die Entwicklergemeinde sie ab und fällte ein eher ernüchterndes Urteil. Der erste Blick auf die Dokumente der Go-Website [a] lässt die Gründe dafür erahnen. Googles neue Sprache stellt sich dem Betrachter optisch erst einmal als ein Mitglied der C-Sprachenfamilie dar. Bezeichner, Funktionsdeklaration und -aufrufe, Argumente in runden Klammern und Blöcke in geschweiften. Dazu kommen Verkürzungen, wie sie von Python bekannt sind, sowie der native Datentyp map, in anderen Sprachen auch als Dictionary, HashMap oder HashTable bekannt. Spannend wird es bei Funktionsaufrufen mit dem davorgestellten Kommando go sowie dem Datentyp chan. Mittels go werden Funktionen als sogenannte Goroutines nebenläufig gestartet, während Variablen des Typs chan als Datenkanäle von und zu diesen Routinen dienen. Hier findet sich das Konzept der Communicating Sequential Processes, kurz CSP, des britischen Computer-Wissenschaftlers Tony Hoare wieder [b]. Andere hierauf beruhende Sprachen sind Erlang, Occam und Scala, die sich am Actor-Modell von Carl Hewitt, Peter Bishop und Richard Steiger orientieren [c]. Gegen die Qual der Wahl Doch warum das hemmungslose Zusammenkopieren dieser und weiterer gebräuchlicher Techniken? Im September 2007 haben sich Rob Pike und Ken Thompson, beide bekannte Entwickler des Betriebssystems Unix und diverser Werkzeuge seinerzeit in den Bell Labs, sowie Robert Griesemer am Whiteboard zusammengesetzt. Ziel war die Skizze einer neuen Systemsprache, der Softwareentwicklung Softwareentwicklung 134 Go: Googles neue Programmiersprache Ready, steady, ... Frank Müller Anfang November stellte Google der überraschten Öffentlichkeit eine neue Programmiersprache mit dem kurzen Namen Go vor. Obwohl alle Features bereits von anderen Sprachen bekannt sind und Softwareentwickler eher verhalten urteilten, erreichte Go aus dem Stand Platz 13 auf dem TIOBE Index und wurde zur Sprache des Jahres 2009 gekürt. Kaum hatte Google seine neue Programmiersprache vorgestellt, klopfte die Entwicklergemeinde sie ab und fällte ein eher ernüchterndes Urteil. Der erste Blick auf die Dokumente der Go-Website [a] lässt die Gründe dafür erahnen. Googles neue Sprache stellt sich dem Betrachter optisch erst einmal als ein Mitglied der C-Sprachenfamilie dar. Bezeichner, Funktionsdeklaration und -aufrufe, Argumente in runden Klammern und Blöcke in geschweiften. Dazu kommen Verkürzungen, wie sie von Python bekannt sind, sowie der native Datentyp map, in anderen Sprachen auch als Dictionary, HashMap oder HashTable bekannt. Spannend wird es bei Funktionsaufrufen mit dem davorgestellten Kommando go sowie dem Datentyp chan. Mittels go werden Funktionen als sogenannte Goroutines nebenläufig gestartet, während Variablen des Typs chan als Datenkanäle von und zu diesen Routinen dienen. Hier findet sich das Konzept der Communicating Sequential Processes, kurz CSP, des britischen Computer-Wissenschaftlers Tony Hoare wieder [b]. Andere hierauf beruhende Sprachen sind Erlang, Occam und Scala, die sich am Actor-Modell von Carl Hewitt, Peter Bishop und Richard Steiger orientieren [c]. Gegen die Qual der Wahl Doch warum das hemmungslose Zusammenkopieren dieser und weiterer gebräuchlicher Techniken? Im September 2007 haben sich Rob Pike und Ken Thompson, beide bekannte Entwickler des Betriebssystems Unix und diverser Werkzeuge seinerzeit in den Bell Labs, sowie Robert Griesemer am Whiteboard zusammengesetzt. Ziel war die Skizze einer neuen Systemsprache, der schnell ein Plan folgte. Wurde anfangs noch neben der eigentlichen Arbeit und parallel entworfen, so begann Thompson im Januar 2008 mit der Entwicklung eines experimentellen Compilers. Bis Mitte des Jahres entwickelte sich Go zu einem Vollzeitprojekt, und weitere Google-Mitarbeiter ergänzten das Team. Die Motivation für diese Bemühungen war die Unzufriedenheit mit den bis dato bestehenden Sprachen für die Systemprogrammierung. Laut Entwicklerteam musste man stets zwischen effizienter Kompilierung, performanter Ausführung und einfacher Programmierung wählen. Alles gemeinsam hat keine Mainstream-Sprache geboten und kann es auch nicht optimal durch Bibliotheken vermitteln. Daher wollte man versuchen, die Leichtigkeit interpretierter und dynamisch typisierter Sprachen mit der Effizienz und Sicherheit statisch typisierter und kompilierter Sprachen zu verbinden. Gleichzeitig sollte der Weiterentwicklung der Laufzeitumgebungen Rechnung getragen werden. Der Fokus lag auf einer effektiven Nebenläufigkeit beim Einsatz von Multi-Core-Rechnern sowie Netzwerken. Schließlich hat man eine hohe Geschwindigkeit sowohl für einen Build-Lauf als auch für die Ausführung angestrebt. Insgesamt hohe Ziele, die nicht auf ein wissenschaftliches Ideal ausgerichtet waren. Bei den Vätern der Sprache verwundert die Nähe zu C nicht. Syntaktische Vereinfachungen sollen den Tippaufwand für Entwickler verringern. Dazu zählen das Vermeiden von Deklaration und der Verzicht auf Header-Dateien. Das Typensystem ist geradlinig, und Trenner als Abschluss von Anweisungen sind nicht erforderlich. Die von virtuellen Maschinen bekannte Garbage Collection entbindet den Programmierer von aufwendiger Detailarbeit bei der Speicherverwaltung. Gleichzeitig haben die Entwickler jedoch auch einige der von C und C++ bekannten Möglichkeiten eingeschränkt, um die Stabilität der Software durch die Vermeidung bekannter Fehlerquellen zu erhöhen. Beispielsweise hat man auf Pointer-Arithmetik, Vererbung und das Überladen von Methoden und Operatoren verzichtet. Unixe werden zuerst bedient Mit der Installation von Go auf dem eigenen Rechner kann der Anwender bereits die ersten Ziele überprüfen. Nach dem Download und Entpacken des Pakets sind Umgebungsvariablen für die Quell- und Zielverzeichnisse sowie für die Zielplattform zu setzen. Derzeit unterstützt die Sprache Mac OS X, Linux und FreeBSD, eine Portierung nach Windows trägt derzeit die Community in das Projekt. Sind diese Voraussetzungen gegeben und die Variablen gesetzt, lassen sich Binaries und Bibliotheken über ein Skript erzeugen. Geht dies insgesamt schon schnell, so überzeugt insbesondere die rasante Übersetzung der Go-Quellen der mitgelieferten Pakete. Ein make clean gefolgt von time make hat die zum Zeitpunkt des Schreibens etwa 4 MByte in 543 Go-Dateien der Bibliotheken auf dem Notebook des Autors in etwas über 8 Sekunden kompiliert und die Bibliotheken gepackt. Ist der Pfad um das Zielverzeichnis ergänzt, kann man mit eigenen Entwicklungen beginnen. Die Dokumentation auf der Website gibt bezüglich der Organisation der Verzeichnisstruktur sowie des Aufbaus der Makefiles Hilfestellung. Diese Dateien unterscheiden sich, je nachdem, ob man sich an der Weiterentwicklung beteiligen will oder eigenständige Projekte plant. Beides gestaltet sich wegen der vorbereiteten Includes übersichtlich. Die mitgelieferten Werkzeuge - hierzu später mehr - und ein Test-Framework helfen dem Einsteiger ebenso wie die Integration in Editoren und Entwicklungsumgebungen wie VIM, Emacs, BBEdit/TextWrangler, Kate und XCode. Weitere Werkzeuge und Unterstützungen sind inzwischen über die Go Language Resources [e] verfügbar. So gerüstet ist es Zeit für das allseits bekannte Hello-World-Beispiel (Listing 1). Jede Go-Datei deklariert am Anfang ihre Zugehörigkeit zu einem Paket, für ein ausführbares Programm muss es main lauten. Die Hauptfunktion darin trägt ebenfalls den Namen main, hat weder Argumente noch einen Rückgabetyp. Beides stellen mitgelieferte Bibliotheken bereit, die über die import-Anweisung eingebunden und in der Regel über den Paketnamen angesprochen werden. Eventuell dabei entstehende Konflikte kann die Definition eines Alias ausräumen. Jeder Import kann über eine eigene Anweisung erfolgen, mit runden Klammern ist eine Gruppierung möglich. Variablen lassen sich global für ein Paket oder wie in Listing 1 lokal in Funktionen und Blöcken deklarieren. Die Form hierfür erinnert an Pascal: die Anweisung /var/ gefolgt von Variablenbezeichnern und der Typenangabe. Alternativ bietet Go eine Erleichterung: Da der Rückgabetyp einer Funktion eindeutig definiert ist, kann der Programmierer auf die Deklaration verzichten. Statt einer Zuweisung mit dem Gleichheitszeichen (=) kommt hier die mit einem Doppelpunkt plus Gleichheitszeichen (:=) zum Einsatz. Dies spart einerseits viel Tipparbeit, andererseits fördert es die Einmalzuweisung von Variablen und verringert so Seiteneffekte. Allerdings gibt es keinen Zwang zur einmaligen Zuweisung wie in Erlang/OTP. Die möglichen Typen für Variablen sind Ganz- und Fließkommazahlen mit fest definierten Größen, Zeichen, Zeichenketten, Wahrheitswerte sowie Funktionen. Dazu kommen Arrays, Slices, Maps, Pointer, Channels, Strukturen und Schnittstellen. Die Ganzzahlen bewegen sich zwischen 8 und 64 Bit, jeweils mit und ohne Vorzeichen, Fließkommazahlen sind mit 32 und 64 Bit Genauigkeit verfügbar. Zeichen liegen in Go im Unicode vor, Zeichenketten sind laut Dokumentation nicht veränderbare Byte-Arrays. Daher gibt die interne Funktion len() hier auch nicht die Länge einer Zeichenkette, sondern die Anzahl verwendeter Bytes aus. Funktionen sind ein Datentyp Hilfe für den Entwickler bietet das Paket strings, das jedoch noch einen unvollständigen Eindruck hinterlässt. Die Wahrheitswerte halten mit true und false wenig Überraschendes bereit, es handelt sich aber um einen nativen Datentyp und nicht über einen als Integer realisierten Workaround. Da Funktionen als Datentyp integriert sind, lassen sich mächtige, aus der funktionalen Programmierung bekannte Muster implementieren. Die Größe von Arrays ist in Go statisch, im Gegensatz zu Slices. Hierbei handelt es sich um Referenzen auf ein Segment eines Array mit einer aktuellen Größe und Kapazität. Mehrere Slices für ein Array können sich überlappen. Maps als Speicherstrukturen sind von Python bekannt, andere Sprachen wie Smalltalk oder Java realisieren sie als Dictionaries oder HashTables in Form von Bibliotheken. Pointer auf Daten sind in Go keine Zeiger, wie man sie von C kennt. Sie steuern bei Funktionsargumenten lediglich das Pass-by-Reference im Gegensatz zum Standardvorgehen Pass-by-Value. Einzige Ausnahme hier sind Slices, Maps und Channels, die Go immer als Referenz übergibt. Diese Inkonsistenz hat das Google-Team zugunsten der Produktivität in Kauf genommen. Man gewöhnt sich leicht daran, und in den typischen Anwendungsfällen geht das Konzept auf. Die Channels dienen - im Gegensatz zur jeweils einen Mailbox pro Prozess in Erlang/OTP - zur Kommunikation zwischen Goroutines, die sowohl mehrere Sender als auch Empfänger nutzen können. Mehrere der bisherigen Datentypen lassen sich in einer Struktur binden. Ähnlich wie in der objektorientierten Programmierung können Entwickler Methoden an Strukturen binden, allerdings ohne Vererbung und Polymorphie. Sowohl bei den Feldern als auch bei den Methoden zeigt sich der implizite Weg, den Go für den Export von Bezeichnern wählt. Er richtet sich nach dem Anfangsbuchstaben, der in der Klasse der Unicode-Großbuchstaben enthalten sein muss. Anfangs ist dies sicherlich ungewohnt, dafür spart es wieder Tipparbeit und erscheint nach wenigen Tagen als normal. Ein weiterer Vorteil ist die Sichtbarkeit nicht nur beim Export, sondern auch bei jedem Zugriff. Listing 2 zeigt den Ausschnitt eines Pakets zur Messung und Konsolidierung von Ausführungszeiten in Programmen. Der Typ Measuring ist nach außen sichtbar, seine Felder hingegen nicht. Nur die Funktionen des Pakets können sie lesen und schreiben. Instanzen von Strukturen werden direkt über eine Variablendeklaration oder über die interne Funktion new() erzeugt. Oft dienen jedoch wie im Beispiel Funktionen als Ersatz für Konstruktoren, die Go nicht kennt. Aktuell sind auch Destruktoren unbekannt. Das Entwicklerteam überlegt sich allerdings, sie für einen geordneten Abbau später einzuführen. Die Deklaration von Methoden im Unterschied zu regulären Funktionen erfolgt über die Angabe von Variable und Typ nach dem Schlüsselwort func. So lässt sich eine Messung mit dem Code in Listing 2 durch m := measuring. BeginMeasuring( My Func ) erzeugen und mit m.EndMeasuring() beenden. Insgesamt entspricht dies nicht der Objektorientierung, mittels der Aggregation beziehungsweise Komposition lassen sich dennoch komplexe Konstrukte aufbauen. Die Bündelung von Methodendeklarationen ohne eine Implementierung erfolgt über Interfaces, ein weiterer Typ in Go. Sie fassen Signaturen zusammen, die Typen später als Methoden zur Verfügung stellen können. Implementiert ein Typ alle Methoden einer Schnittstelle, gilt sie selbst ebenfalls als implementiert. Insofern kann ein Typ eine beliebige Anzahl von Schnittstellen implementieren, ohne dies besonderes zu deklarieren. Beispielsweise kennt das Paket sort das Interface sort.Interface mit den Funktionen Len(), Less(i, j int) bool und Swap(i, j int). Über die Implementierung dieser drei Funktionen für eine eigene Speicherstruktur sind so automatisch auf dieser Schnittstelle wirkende Funktionen wie Sort() und IsSorted() des Pakets anwendbar. Der Compiler prüft die Implementierung der für ein Interface definierten Methoden durch einen Typ, wenn dieser im Rahmen eines Arguments zugewiesen wird. Auf diese Weise lässt sich doch eine Art Polymorphie realisieren. Im Gegensatz zu Typen sind Schnittstellen miteinander kombinierbar, wenn man sie bei der Deklaration ineinanderschachtelt (Listing 3). Eine Sonderrolle spielt das Empty Interface interface{}, das eine Art universellen Datentyp darstellt. Dieser kann vielfältig genutzt werden, birgt momentan aber die Unsicherheit dynamisch typisierter Sprachen. Daher bieten im Gegensatz zum möglichen expliziten Cast sowohl Reflection als auch Type Switch hilfreiche Alternativen für den Umgang mit dem Empty Interface (Listing 4). Concurrency durch Coroutines Listing 4 geht auf eine weitere Besonderheit von Go ein: die oben erwähnten Möglichkeiten im Rahmen der Concurrency. Die Sprache arbeitet an dieser Stelle mit Koroutinen, im Sprachgebrauch Gos als Goroutines bezeichnet. Hierbei handelt es sich um leichtgewichtige Prozesse, deren konkrete Verarbeitung über einen Thread Pool, intelligentes Scheduling und kleine dynamische Stacks erfolgt. Sie zielen auf eine der großen Herausforderungen der modernen Softwareentwicklung: die optimale Ausnutzung von Multi-Core-Systemen. Verfügen Prozessoren heute noch über zwei, vier oder acht Kerne, so werden schon bald Systeme mit 64, 100 oder mehr Kernen üblich sein. Erste Prototypen finden sich bereits im iX-Labor. Die größte Verantwortung für die Verteilung von Arbeiten auf die ihm zur Verfügung stehenden Recheneinheiten trägt der Entwickler. Er muss seine Aufgaben so zerlegen, dass sich einzelne Bestandteile parallel ausführen lassen. Je weniger diese Teile interferieren, umso weniger Synchronisationsaufwand gibt es, das Risiko eines Deadlock verringert sich, und Seiteneffekte entfallen. Go liefert hierfür neben seinen leichtgewichtigen Prozessen für die Ausführung konkurrierender Arbeiten ein weiteres Sprachmittel, ohne dessen Einsatz jedoch zu erzwingen. Mittel der Wahl sind die genannten Datenkanäle, die den beteiligten Goroutines für ihre Kommunikation zur Verfügung stehen. Sie sind typisiert, gepuffert oder ungepuffert sowie uni- oder bidirektional. Damit ist ihr Einsatzgebiet vielfältig. Das Beispiel zeigt, wie in der Init-Funktion des Pakets das Schlüsselwort go den Arithmetik-Server startet. Dieser initialisiert vor seiner internen Endlosschleife den Channel für Requests mit einem Puffer. In der Schleife wartet er auf Anfragen, die er nach Typ unterscheidet und ausführt. Das Ergebnis gelangt über einen individuellen Antwort-Channel pro Request an den Anfrager zurück. Dieses in Go gängige Muster ermöglicht es dem Server, umfangreichere Aufgaben in eigene Goroutines auszulagern und somit unmittelbar für neue Aufgaben zur Verfügung zu stehen. Im Beispiel ist dies die Berechnung einer Fibonacci-Zahl. Ein weiteres Einsatzgebiet für gepufferte Kanäle ist das Throttling, also die Begrenzung der Goroutines, bei paralleler Ausführung. In diesem Fall dient ein Channel mit einer vorgegebenen Puffergröße nur zur Steuerung. Gepufferte wie ungepufferte Kanäle blockieren beim Schreiben, bis das vorherige Datum gelesen ist, und beim Lesen, bis ein Datum anliegt. Dies kann eine Anwendung insofern nutzen, als dass sie keine neuen Verarbeitungen startet, bis der Channel es zulässt. Eine Rückmeldung nach Fertigstellung auf dem Channel ermöglicht den Start der nächsten parallelen Funktion. Gerade bei der echten Parallelisierung gleichartiger Aufgaben, etwa der Analyse großer Datenmengen mit Algorithmen wie Map-Reduce, ist eine Begrenzung auf die Anzahl der Prozessorkerne sinnvoll. Unabhängig davon zeigten jedoch eigene Tests mit mehreren 10 000 parallel arbeitenden Goroutines ein stabiles und performantes Verhalten. Zu guter Letzt ist der Empfang von Daten in einer Server-Goroutine nicht nur auf einen Channel eingeschränkt. Go erlaubt eine select-Anweisung für den Zugriff auf mehrere Kanäle. Dieser Weg ist typensicherer als der über den Type Switch, erfordert jedoch im Gegenzug pro Datentyp einen eigenen Channel (Listing 5). Konkurrierende Prozesse In seinem Umgang mit konkurrierenden Prozessen weist Go leider auch einige Schwächen auf. So ist der gemeinsame Zugriff auf globale oder im Paket sichtbare Variablen erlaubt, aber anders als in Sprachen wie Clojure nicht transaktional. Damit hat der Entwickler selbst für einen kontrollierten und konsistenten Zugriff zu sorgen. Das Paket sync unterstützt dies mit zwei Mutex-Typen, empfohlen ist jedoch die Nutzung von Kanälen. Ein weiterer Schwachpunkt ist das Fehlen von Timeouts beim Empfang von Nachrichten. Dies lässt sich jedoch über das Paket time und einen eigenen Channel umgehen. Leider kann man Goroutines nicht überwachen. Das Spawning mit go hat keinen Rückgabewert, auf den eine Überwachung durch das System oder ein Paket ansetzen könnte. Eine Simulation auf Basis von Channels und Datenaustausch muss der Programmierer selbst implementieren und dabei Situationen wie korrekt blockierte Prozesse berücksichtigen. Zumindest wird eine Lösung für die Kommunikation zwischen zwei Programminstanzen auf einem Rechner oder im Netz geboten. Mithilfe des Pakets netchan können Channels ex- und importiert werden und stehen so übergreifend zur Verfügung. Die Syntax in Go ist in weiten Teilen geradlinig und einfach gestaltet. So verzichtet sie auf explizite Semikola zur Trennung von Anweisungen, rahmt Blöcke durch geschweifte Klammern ein, und die Kontrollkonstrukte if, for, switch und select haben einen gleichartigen Aufbau. Vom Schleifenbefehl for existieren drei spezielle Formen für endlose Verarbeitungen ohne Bedingung, für einen Abbruch auf Basis eines booleschen Ausdrucks und für die üblichen Zähler. Gemeinsam mit der range-Anweisung kann man komfortabel über die Inhalte von Arrays, Slices, Maps und Channels iterieren: for index, value := range myArray { ... } An dieser Stelle zeigt sich, dass Go mehrere Werte gleichzeitig zuweisen kann. Dieses Vorgehen kennt man bereits von Python, wo es sich bewährt hat. Im Rahmen von range gibt das System neben dem Wert seinen Index im Array oder Slice beziehungsweise seinen Key in einer Map zurück. Eine weitere Anwendung ist die Signalisierung einer erfolgreichen Verarbeitung durch einen booleschen Wert. Innerhalb einer if-Anweisung kann ein Programm ihn direkt auswerten: if handle, ok := open(device); ok { ... } Die Entwickler von Go propagieren dieses Muster als Alternative zu den nicht vorhandenen Exceptions, die sie aufgrund ihrer weitreichenden Implikationen aktuell als zu komplex ansehen. Allerdings ist die Diskussion noch nicht abgeschlossen, ebenso wenig wie die über die noch fehlenden Generics. Derzeit dienen Empty Interfaces als Ersatz, die aber in einer umständlichen Verarbeitung resultieren. Hier muss der Type Switch oder die über das Paket reflect mögliche Reflection eingesetzt werden. Interessant ist sicherlich nicht nur, zu welcher Entscheidung das Team kommt, sondern auch, wie es diese begründen wird. Glücklicherweise gehen die Entwickler in den FAQs recht offen mit den Informationen um. Nicht nur in ihren Kernfunktionen offenbart sich die Qualität einer Sprache, sondern auch an ihren Standardbibliotheken sowie den mitgelieferten Werkzeugen. Hier zeigt sich Go von einer für seine offizielle Lebenszeit schon reifen Seite. Go profitiert von Plan 9, einem 1990 gestarteten Projekt der Bell Labs, in dem Ken Thompson und Rob Pike mitwirkten. Kennern wird die Ähnlichkeit des Go-Maskottchens zum Bunny Glenda von Plan 9 nicht entgehen. Diese Wurzeln finden sich in diversen Paketen und Werkzeugen wieder. Tiefe Wurzeln und große Mitgift An den Bibliotheken Gos wird deutlich, welches Unternehmen die Sprache entwickelt und worauf es sein Augenmerk legt. Ein Großteil der Software befasst sich mit dem Internet beziehungsweise mit im Umfeld von Netzanwendungen benötigten Funktionen. Neben Low-Level-Routinen für Unix-, TCP/IP- und UDP-Sockets sowie DNS finden sich Server und Client für HTTP und Web Sockets im Lieferumfang. Dazu kommen RPC und die Nutzung von Channels über das Netz. Für einen Datenaustausch sind XML, JSON und verschiedene Encodings enthalten, zusätzlich bietet das Paket crypto Unterpakete für AES, MD5, SHA-1, X.509 und viele weitere Verfahren. Templates und Datenkompression runden den Einstieg in die Entwicklung von Webapplikationen ab. Es bleibt abzuwarten, welche Bibliotheken seitens der Community hierauf aufbauen werden. Ein Großteil der typischerweise elektronisch verarbeiteten Daten ist vom Typ String. Hilfreiche Funktionen für Unicode, Konvertierungen, reguläre Ausdrücke und eine tabellarische Ausgabe stellen Go-Bibliotheken bereit. I/O-Werkzeuge mit Streams und Puffern, Patching, Archivierung, ASN.1 und EBNF gehören ebenfalls dazu. Weiter sind Schnittstellen zum Betriebssystem, Dateibehandlung, Reflection, Collections, Sortierung, Mutex, mathematische Funktionen, eine X11-Integration und diverse experimentelle Pakete enthalten. Google erhöht den Lieferumfang von Pre-Release zu Pre-Release, die es inzwischen etwa alle 14 Tage freigibt. Parallel dazu steuert die Community hilfreiche Pakete bei. Neben Compiler und Loader sind für den erfolgreichen Umgang mit einer Programmiersprache weitere Werkzeuge notwendig. Eine vollständige Entwicklungsumgebung liegt naturgemäß noch nicht vor. Für die Kommandozeile sind jedoch diverse Programme im Paket enthalten. Der erste Berührungspunkt ist das Make-System, das den Entwickler komfortabel bei der Übersetzung, den Tests und dem Deployment eigener Projekte unterstützt. Compiler und Loader werden um Assembler und C-Compiler ergänzt. Weitere Werkzeuge dienen der Integration von C, der Code Coverage, YACC, dem Packen von Go-Applikationen und dem Profiling. Einige dieser Tools befinden sich noch in einem sehr frühen Stadium. Die für den Entwickler jedoch wichtigsten Hilfen in seiner täglichen Arbeit sind gofmt für eine standardisierte Formatierung des Quelltexts, gotest für Unit Tests und godoc für die statische und dynamische Generierung einer HTML-Dokumentation aus den Quellen. Insbesondere um die Formatierung gab es anfangs Diskussionen, da gofmt dem Entwickler einen Stil vorschreibt. Andererseits sind so alle Quelltexte von Google und der Community in diesem Aspekt konsistent, was die Einarbeitung in fremden Code erleichtert. Gleichzeitig ist das Programm in der Lage, Transformationsregeln auf Quelltexte anzuwenden, da es den Code lexikalisch analysiert, zerlegt und wieder aufbaut. So kann der Entwickler eigene Entwicklungen an spätere Syntaxänderungen anpassen, ohne selbst eingreifen zu müssen. Fazit Die Ernüchterung der Community kurz nach der Ankündigung von Go ist nachvollziehbar - geht man von einer ersten oberflächlichen Betrachtung und einer Erwartungshaltung aus, die auf neuen Google-Entwicklungen wie Map-Reduce oder BigTable beruht. Allerdings war das Ziel der Entwickler weder ein akademisches Forschungsobjekt der reinen Lehre noch eine Sprache für die Realisierung von Geschäftslogik auf einem abstrakten Niveau. Vielmehr sollte eine neue Systemsprache entstehen, ein C, wie es seine Erfinder heute realisieren würden. Bewährte Konzepte aus C sollten übernommen und evolutionär verbessert werden, riskante Konstrukte entfernt. Komfortable Elemente aus dynamischen Sprachen, speziell Python, wollte man in die Sprache integrieren und sie gleichzeitig für den Einsatz auf Multi-Core-Rechnern optimieren. Go ist noch jung, von der ersten Idee über den ersten Code bis zur Veröffentlichung sind gerade zwei Jahre vergangen. Seit drei Monaten lebt die Sprache in der freien Wildbahn. Dennoch scheint Go gereift und hat einen Großteil der anvisierten Ziele erreicht. Lässt man sich als Entwickler darauf ein, fällt - je nach eigener Erfahrung - die schnelle Einarbeitungszeit auf. Gerade Programmierer mit C-Know-how finden sich rasch in der Syntax zurecht und erfreuen sich an den Erleichterungen. Gleiches gilt für Nutzer dynamischer Programmiersprachen, da die Deklaration von Variablen auf ein Minimum reduziert wurde, ohne die Typsicherheit zu vernachlässigen. Auf lieb gewonnene Datenstrukturen wie map muss dennoch niemand verzichten. Der einzige komplexere Aspekt ist die Parallelisierung von Aufgaben mittels Goroutines und Channels. Hier sind eindeutig Nutzer von Sprachen mit ähnlichen Konzepten im Vorteil, wie sie Erlang/OTP oder Scala bieten. Insgesamt erstaunt die Produktivität in Go, obwohl die Entwicklung der Sprache selbst noch im vollen Fluss ist. Die Codierung geht flüssig von der Hand, ebenso das Übersetzen und die Tests. Dank gofmt muss der Programmierer nicht auf die Formatierung achten, sondern nur darauf, sprechende Bezeichner zu verwenden. Rob Pike, Ken Thompson und Robert Griesemer holen mit ihrem evolutionären Ansatz eine Vielzahl potenzieller Nutzer in deren heutigem Umfeld ab und bieten ihnen einen guten Mix bewährter Verfahren, was zu einem Zeitpunkt, zu dem Alternativen zu bewährten Sprachen diskutiert werden, auf fruchtbaren Boden trifft. Das Ergebnis sind eine schnell wachsende Entwicklergemeinde und eine Vielzahl neuer Projekte auf Basis von Go. So kündigte das GCC-Team bereits die Integration der Sprache an. (ka) Frank Müller ist Senior Consultant bei der BTC AG in Oldenburg. iX 3/2010 x-tract l Googles im November vorgestellte Programmiersprache Go orientiert sich stark an der Syntax von C und zum Teil an der von Python. l Das Entwicklerteam, zu dem unter anderem die Unix-Urgesteine Rob Pike und Ken Thompson gehören, haben bewährte Konzepte der C-Sprachfamilie übernommen und zum Teil verbessert, während sie auf solche, die sich als fehlerträchtig erwiesen haben, komplett verzichten. l Mittels Goroutines und Channels lassen sich Aufgaben für Multi-Core-Rechner parallelisieren, sodass sich Go in diesem Aspekt mit Sprachen wie Erlang/OTP und Scala messen kann. l Obwohl die Sprache noch jung ist, gibt es bereits diverse Bibliotheken und Werkzeuge, die sowohl von Googles Entwicklerteam als auch von der Community kontinuierlich erweitert werden. iX 3/2010 Listing 1: Hello World in Go package main import ( fmt time ) func main() { t := time.LocalTime() fmt.Printf(Hello Word, it is %v.\\n, t) } 135 Listing 4: Server auf Nachrichtenbasis Listing 3: Kombination von Interfaces Listing 2: Struktur mit Constructor und Methode type Reader interface { Read(b Buffer) bool } type Lockable interface { Lock() Unlock() } type LockableReader interface { Reader Lockable } package measuring type Measuring struct { id string startTime int64 endTime int64 } func BeginMeasuring(id string) *Measuring { return &amp;Measuring{id, time.Nanoseconds()} } func (m *Measuring) EndMeasuring() int64 { m.EndTime = time.Nanoseconds() measuringsInChan - *m return m.EndTime - m.StartTime } type addCmd struct { a int b int replyChan chan int } var requestChan chan interface{} func init() { go arithmeticServer() } func Add(a, b int) int { replyChan := make(chan int) requestChan - addCmd{a, b, replyChan} return -replyChan } func arithmeticServer() { requestChan = make(chan interface{}, 100) for { request := -requestChan switch cmd := request.(type) { case addCmd: cmd.replyChan - cmd.a + cmd.b case subtractCmd: ... case fibonacciCmd: go calcFibonacci(cmd) default: log.Stderrf(Unknown command: %v\\n, cmd) } } } Wissen Softwareentwicklung 136 iX 3/2010 iX 3/2010 Listing 5: Empfang über mehrere Kanäle func server() { for { select { case addCmd := - addCmdChan: ... case subtractCmd := - subtractCmdChan: ... } } } 137 Wissen Softwareentwicklung 138 [a] The Go Programming Language golang.org [b] Communicating www.usingcsp.com Sequential Processes [c] A Universal Modular Actor dli.iiit.ac.in/ijcai/IJCAI-73/ Formalism for Artificial Intelligence PDF/027B.pdf [e] Go Language Resources go-lang.cat-v.org [f] Go Language Patterns www.golangpatterns.info Onlinequellen iX 3/2010 www.ix.de/ix1003134 x iX - Magazin für Informationstechnik"],"facet_avail":["Online"],"format":["ElectronicArticle"],"fullrecord":"blob:ai-48-SVhfXzIwMTAwMjI1NDY","id":"ai-48-SVhfXzIwMTAwMjI1NDY","institution":["DE-Pl11"],"imprint":"2010","mega_collection":["Genios (Technik)"],"publishDateSort":"2010","record_id":"2010022546","recordtype":"ai","series":["iX - Magazin für Informationstechnik"],"spellingShingle":["iX - Magazin für Informationstechnik","Softwareentwicklung","n.n."],"source_id":"48","title":"Softwareentwicklung","title_full":"Softwareentwicklung","title_fullStr":"Softwareentwicklung","title_full_unstemmed":"Softwareentwicklung","title_short":"Softwareentwicklung","title_sort":"softwareentwicklung","topic":["n.n."],"url":["https://www.wiso-net.de/document/IX__2010022546"],"publishDate":["2010-01-01"],"physical":[""],"description":"","container_issue":"03","container_title":"iX - Magazin für Informationstechnik","format_de105":["Article, E-Article"],"format_de14":["Article, E-Article"],"format_de15":["Article, E-Article"],"format_de520":["Article, E-Article"],"format_de540":["Article, E-Article"],"format_dech1":["Article, E-Article"],"format_ded117":["Article, E-Article"],"format_degla1":["E-Article"],"format_del152":["Buch"],"format_del189":["Article, E-Article"],"format_dezi4":["Article"],"format_dezwi2":["Article, E-Article"],"format_nrw":["Article, E-Article"],"branch_nrw":["Electronic Resources"],"_version_":1615856126423728128,"geogr_code":["not assigned"],"last_indexed":"2018-10-31T15:41:26.508Z","geogr_code_person":["not assigned"],"finc_class_facet":["not assigned"]}
{"access_facet":"Electronic Resources","spelling":["n.n. https://www.wiso-net.de/document/REMW__94455656 (GlobeNewswire) - ActiveState, the open source languages company, today announced the release of its new commercial Go programming language distribution, ActiveGo. This follows a 3-month beta of ActiveGo, based on the most recent version of Go (v1.8), and comes pre-bundled with some of the most popular Go packages and tools. With the rising popularity of Golang, which is now #15 on the TIOBE Index (compared to #122 in May 2015), ActiveGo makes it easier for enterprises to adopt Go by providing cross-platform consistency, commercial support, security and license reviews, and legal indemnification. Pre-bundled with over 70 essential packages, ActiveGo makes it easier for developers working in microservices, cloud integrations, and machine learning to focus on coding and not on language configuration. Featured Golang packages include the Go language bindings and installation documentation for TensorFlow, a popular machine learning library for deep learning with neural networks; connectors to MongoDB, Cassandra, Kafka, PostgreSQL, Redis, Oracle, MySQL and SQL Server; cloud and microservices packages to work with AWS, Google App Engine and Memcached; and testing and developer tools for error handling, debugging, code quality checking and logging. \"Go is a powerful language that features the best of what todays web developers need -- fast development, fast runtime speed, and a small footprint with one binary deployment. And now, by starting to include machine learning integrations, well be helping developers deploy machine learning algorithms into their applications,\" said Jeff Rouse, Director of Product Management, ActiveState. \"We look forward to continuing to work with the Go community, and making it easy for developers to get enterprise approval for Go.\" ActiveGo is now available on Linux, MacOS, and Windows in Community, Business and Enterprise Editions. ActiveState welcomes feedback from the community to continue to shape ActiveGo. Developers can get started progra ActiveState Releases First Commercial Distribution of the Go Programming Language (GlobeNewswire) - ActiveState, the open source languages company, today announced the release of its new commercial Go programming language distribution, ActiveGo. This follows a 3-month beta of ActiveGo, based on the most recent version of Go (v1.8), and comes pre-bundled with some of the most popular Go packages and tools. With the rising popularity of Golang, which is now #15 on the TIOBE Index (compared to #122 in May 2015), ActiveGo makes it easier for enterprises to adopt Go by providing cross-platform consistency, commercial support, security and license reviews, and legal indemnification. Pre-bundled with over 70 essential packages, ActiveGo makes it easier for developers working in microservices, cloud integrations, and machine learning to focus on coding and not on language configuration. Featured Golang packages include the Go language bindings and installation documentation for TensorFlow, a popular machine learning library for deep learning with neural networks; connectors to MongoDB, Cassandra, Kafka, PostgreSQL, Redis, Oracle, MySQL and SQL Server; cloud and microservices packages to work with AWS, Google App Engine and Memcached; and testing and developer tools for error handling, debugging, code quality checking and logging. \"Go is a powerful language that features the best of what todays web developers need -- fast development, fast runtime speed, and a small footprint with one binary deployment. And now, by starting to include machine learning integrations, well be helping developers deploy machine learning algorithms into their applications,\" said Jeff Rouse, Director of Product Management, ActiveState. \"We look forward to continuing to work with the Go community, and making it easy for developers to get enterprise approval for Go.\" ActiveGo is now available on Linux, MacOS, and Windows in Community, Business and Enterprise Editions. ActiveState welcomes feedback from the community to continue to shape ActiveGo. Developers can get started programming in ActiveGo by downloading the Free Community Edition here: http://www.activestate.com/activego. About ActiveStateActiveState, the Open Source Languages Company, provides enterprise grade programming language distributions backed with cross-platform consistency, commercial technical support, security reviews, license reviews, and indemnification. ActiveStates products and services directly address the challenges faced by enterprises transitioning into digital and algorithmic businesses. Founded in 1997, ActiveState is uniquely positioned to help address these challenges through its experience with enterprises, developers and codes. The Companys products include ActivePerl, ActivePython, ActiveTcl, and ActiveGo, and popular Komodo IDE development environment. More than two million developers and 97% of Fortune-1000 companies including Bank of America, CA, Cisco, Pepsi, Lockheed Martin and NASA use ActiveStates solutions to save time, minimize risk and accelerate time to market. To learn more visit, ActiveState.com. Press Contact: Jesse Casman for ActiveState jcasman@oppkey.com 415-730-2793 (c) 2017 Global Data Point. All Rights Reserved. Provided by SyndiGate Media Inc. (<a href=\"http://syndigate.info\">Syndigate.info</a> ). Real Estate Monitor Worldwide"],"facet_avail":["Online"],"format":["ElectronicArticle"],"fullrecord":"blob:ai-48-UkVNV19fOTQ0NTU2NTY","id":"ai-48-UkVNV19fOTQ0NTU2NTY","institution":["DE-Ch1","DE-D275","DE-Brt1","DE-14","DE-105","DE-Pl11","DE-Zwi2","DE-Rs1","DE-Zi4","DE-D161","DE-L229","DE-Gla1","DE-Bn3"],"imprint":"2017","mega_collection":["Genios (Wirtschaftswissenschaften)"],"publishDateSort":"2017","record_id":"94455656","recordtype":"ai","series":["Real Estate Monitor Worldwide"],"spellingShingle":["Real Estate Monitor Worldwide","ActiveState Releases First Commercial Distribution of the Go Programming Language","n.n."],"source_id":"48","title":"ActiveState Releases First Commercial Distribution of the Go Programming Language","title_full":"ActiveState Releases First Commercial Distribution of the Go Programming Language","title_fullStr":"ActiveState Releases First Commercial Distribution of the Go Programming Language","title_full_unstemmed":"ActiveState Releases First Commercial Distribution of the Go Programming Language","title_short":"ActiveState Releases First Commercial Distribution of the Go Programming Language","title_sort":"activestate releases first commercial distribution of the go programming language","topic":["n.n."],"url":["https://www.wiso-net.de/document/REMW__94455656"],"publishDate":["2017-01-01"],"physical":[""],"description":"","container_title":"Real Estate Monitor Worldwide","format_de105":["Article, E-Article"],"format_de14":["Article, E-Article"],"format_de15":["Article, E-Article"],"format_de520":["Article, E-Article"],"format_de540":["Article, E-Article"],"format_dech1":["Article, E-Article"],"format_ded117":["Article, E-Article"],"format_degla1":["E-Article"],"format_del152":["Buch"],"format_del189":["Article, E-Article"],"format_dezi4":["Article"],"format_dezwi2":["Article, E-Article"],"format_nrw":["Article, E-Article"],"branch_nrw":["Electronic Resources"],"_version_":1615852752402907139,"geogr_code":["not assigned"],"last_indexed":"2018-10-31T14:47:47.19Z","geogr_code_person":["not assigned"],"finc_class_facet":["not assigned"]}
{"access_facet":"Electronic Resources","author":["Gutiérrez Morales, Carlos Eduardo","Verduzco Ramírez, Jesús Alberto","Farías Mendoza, Nicandro"],"spellingShingle":["Gutiérrez Morales, Carlos Eduardo","Verduzco Ramírez, Jesús Alberto","Farías Mendoza, Nicandro","RIDE Revista Iberoamericana para la Investigación y el Desarrollo Educativo","Inyección de Dependencias en el Lenguaje de Programación Go / Dependency injection in GO programming language"],"author_sort":"gutiérrez morales, carlos eduardo","spelling":["Gutiérrez Morales, Carlos Eduardo Verduzco Ramírez, Jesús Alberto Farías Mendoza, Nicandro 2007-7467 http://dx.doi.org/10.23913/ride.v5i10.115 <jats:p>Actualmente, una de las características más buscadas en un proyecto de software es la flexibilidad debido a que los requerimientos tienden a cambiar durante el proceso de desarrollo. Una manera de obtener código desacoplado es mediante el uso de Inyección de Dependencias (DI por sus siglas en inglés). Este documento trata sobre la construcción de una librería de código abierto para el uso de DI en proyectos desarrollados con el lenguaje de programación Go, también conocido como Golang. Esta librería fue construida siguiendo el principio de Inversión de Control (IoC por sus siglas en inglés), tratando de seguir con la estructura común encontrada en los contenedores de DI más populares y teniendo en cuenta las limitaciones que el lenguaje posee. El producto final es una librería fácil de usar, que permite construir el código más fácil de mantener.</jats:p> Inyección de Dependencias en el Lenguaje de Programación Go / Dependency injection in GO programming language RIDE Revista Iberoamericana para la Investigación y el Desarrollo Educativo"],"facet_avail":["Online"],"format":["ElectronicArticle"],"fullrecord":"blob:ai-49-aHR0cDovL2R4LmRvaS5vcmcvMTAuMjM5MTMvcmlkZS52NWkxMC4xMTU","id":"ai-49-aHR0cDovL2R4LmRvaS5vcmcvMTAuMjM5MTMvcmlkZS52NWkxMC4xMTU","institution":["DE-Gla1","DE-Ch1","DE-Brt1","DE-D275","DE-82","DE-15","DE-14","DE-105","DE-Zwi2","DE-Zi4"],"imprint":"2015","issn":["2007-7467"],"language":["English"],"mega_collection":["X-U (CrossRef)"],"publishDateSort":"2015","publisher":[""],"recordtype":"ai","series":["RIDE Revista Iberoamericana para la Investigación y el Desarrollo Educativo"],"source_id":"49","title":"Inyección de Dependencias en el Lenguaje de Programación Go / Dependency injection in GO programming language","title_full":"Inyección de Dependencias en el Lenguaje de Programación Go / Dependency injection in GO programming language","title_fullStr":"Inyección de Dependencias en el Lenguaje de Programación Go / Dependency injection in GO programming language","title_full_unstemmed":"Inyección de Dependencias en el Lenguaje de Programación Go / Dependency injection in GO programming language","title_short":"Inyección de Dependencias en el Lenguaje de Programación Go / Dependency injection in GO programming language","title_sort":"inyección de dependencias en el lenguaje de programación go / dependency injection in go programming language","url":["http://dx.doi.org/10.23913/ride.v5i10.115"],"publishDate":["2015-06-24"],"physical":["316"],"description":"<jats:p>Actualmente, una de las características más buscadas en un proyecto de software es la flexibilidad debido a que los requerimientos tienden a cambiar durante el proceso de desarrollo. Una manera de obtener código desacoplado es mediante el uso de Inyección de Dependencias (DI por sus siglas en inglés). Este documento trata sobre la construcción de una librería de código abierto para el uso de DI en proyectos desarrollados con el lenguaje de programación Go, también conocido como Golang. Esta librería fue construida siguiendo el principio de Inversión de Control (IoC por sus siglas en inglés), tratando de seguir con la estructura común encontrada en los contenedores de DI más populares y teniendo en cuenta las limitaciones que el lenguaje posee. El producto final es una librería fácil de usar, que permite construir el código más fácil de mantener.</jats:p>","container_issue":"10","container_start_page":"0","container_title":"RIDE Revista Iberoamericana para la Investigación y el Desarrollo Educativo","container_volume":"5","format_de105":["Article, E-Article"],"format_de14":["Article, E-Article"],"format_de15":["Article, E-Article"],"format_de520":["Article, E-Article"],"format_de540":["Article, E-Article"],"format_dech1":["Article, E-Article"],"format_ded117":["Article, E-Article"],"format_degla1":["E-Article"],"format_del152":["Buch"],"format_del189":["Article, E-Article"],"format_dezi4":["Article"],"format_dezwi2":["Article, E-Article"],"format_nrw":["Article, E-Article"],"branch_nrw":["Electronic Resources"],"_version_":1615839432090320907,"geogr_code":["not assigned"],"last_indexed":"2018-10-31T11:16:05.805Z","geogr_code_person":["not assigned"],"finc_class_facet":["not assigned"]}
{"access_facet":"Electronic Resources","author":["Meyerson, Jeff"],"spellingShingle":["Meyerson, Jeff","IEEE Software","The Go Programming Language","Andrew Gerrand","arrays","build times","C","compilers","garbage collection","Go","golang","Google","imports","interfaces","open source","readability","scalability","slices","standard library","syntax"],"author_sort":"meyerson, jeff","spelling":["Meyerson, Jeff 0740-7459 IEEE Andrew Gerrand arrays build times C compilers garbage collection Go golang Google imports interfaces open source readability scalability slices standard library syntax http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6898707 http://doi.org/10.1109/MS.2014.127 Andrew Gerrand, who works on the Go programming language at Google, speaks with Jeff Meyerson in this excerpt from Software Engineering Radio. His conversation with Jeff begins with a history of the language, including the details behind how Go was conceived and how the open source community contributes to it. Andrew explains how Go intends to simplify problems which have been motifs as Google has scaled. The Web extra at http://www.se-radio.net/2014/03/episode-202-andrew-gerrand/ is an audio recording of Jeff Meyerson speaking with Andrew Gerrand about the Go programming language. The Go Programming Language IEEE Software"],"facet_avail":["Online"],"format":["ElectronicArticle"],"fullrecord":"blob:ai-89-Njg5ODcwNw","id":"ai-89-Njg5ODcwNw","institution":["DE-15","DE-14","DE-Zi4","DE-Ch1","DE-82"],"imprint":"IEEE, 2014","issn":["0740-7459"],"language":["English"],"mega_collection":["IEEE Xplore Library"],"publishDateSort":"2014","publisher":["IEEE"],"record_id":"6898707","recordtype":"ai","series":["IEEE Software"],"source_id":"89","title":"The Go Programming Language","title_full":"The Go Programming Language","title_fullStr":"The Go Programming Language","title_full_unstemmed":"The Go Programming Language","title_short":"The Go Programming Language","title_sort":"the go programming language","topic":["Andrew Gerrand","arrays","build times","C","compilers","garbage collection","Go","golang","Google","imports","interfaces","open source","readability","scalability","slices","standard library","syntax"],"url":["http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6898707","http://doi.org/10.1109/MS.2014.127"],"publishDate":["2014-09-01"],"physical":["104-104"],"description":"Andrew Gerrand, who works on the Go programming language at Google, speaks with Jeff Meyerson in this excerpt from Software Engineering Radio. His conversation with Jeff begins with a history of the language, including the details behind how Go was conceived and how the open source community contributes to it. Andrew explains how Go intends to simplify problems which have been motifs as Google has scaled. The Web extra at http://www.se-radio.net/2014/03/episode-202-andrew-gerrand/ is an audio recording of Jeff Meyerson speaking with Andrew Gerrand about the Go programming language.","container_issue":"5","container_start_page":"104","container_title":"IEEE Software","container_volume":"31","format_de105":["Article, E-Article"],"format_de14":["Article, E-Article"],"format_de15":["Article, E-Article"],"format_de520":["Article, E-Article"],"format_de540":["Article, E-Article"],"format_dech1":["Article, E-Article"],"format_ded117":["Article, E-Article"],"format_degla1":["E-Article"],"format_del152":["Buch"],"format_del189":["Article, E-Article"],"format_dezi4":["Article"],"format_dezwi2":["Article, E-Article"],"format_nrw":["Article, E-Article"],"branch_nrw":["Electronic Resources"],"_version_":1615864720333471749,"geogr_code":["not assigned"],"last_indexed":"2018-10-31T17:58:02.479Z","geogr_code_person":["not assigned"],"finc_class_facet":["not assigned"]}
{"access_facet":"Electronic Resources","author":["Irawan, Edbert Wijaya","Hendradjaya, Bayu","Sunindyo, Wikan Danar"],"spellingShingle":["Irawan, Edbert Wijaya","Hendradjaya, Bayu","Sunindyo, Wikan Danar","2016 International Conference on Data and Software Engineering (ICoDSE)","Test case generation method for Go language","Testing","Sociology","Statistics","Java","Unit testing","test data and code generation","Golang","coverage"],"author_sort":"irawan, edbert wijaya","spelling":["Irawan, Edbert Wijaya Hendradjaya, Bayu Sunindyo, Wikan Danar 978-1-5090-5671-2 IEEE Testing Sociology Statistics Java Unit testing test data and code generation Golang coverage http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7936140 http://doi.org/10.1109/ICODSE.2016.7936140 In software industry, the quality of software products should became a primary concern. One of many elements that affects to the software quality is testing. Creating a lot of test cases consumes a lot of time and tedious work. These issues can be solved by create a generator that automates the generation of input test data. Go language, or Golang for short, is a new programming language that developed by Google and has been used by many companies for their projects. However, Golang currently does not have any test generator that is able to generate test data with code coverage adequacy. In this research, we propose a process generation of test cases using Genetic Algorithm for Go language. We also have developed a tool based on this process generation. The tool does not only produce test data, but also the test code. By automating the generation, it is expected to reduce the amount of effort and time to generate manually. We have evaluated this process using eight different Golang source code. We found that the process and tool have facilitated the process of unit testing. Test case generation method for Go language 2016 International Conference on Data and Software Engineering (ICoDSE)"],"facet_avail":["Online"],"format":["ElectronicArticle"],"fullrecord":"blob:ai-89-NzkzNjE0MA","id":"ai-89-NzkzNjE0MA","institution":["DE-82","DE-15","DE-14","DE-Zi4"],"imprint":"IEEE, 2016","isbn":["978-1-5090-5671-2"],"language":["English"],"mega_collection":["IEEE Xplore Library"],"publishDateSort":"2016","publisher":["IEEE"],"record_id":"7936140","recordtype":"ai","series":["2016 International Conference on Data and Software Engineering (ICoDSE)"],"source_id":"89","title":"Test case generation method for Go language","title_full":"Test case generation method for Go language","title_fullStr":"Test case generation method for Go language","title_full_unstemmed":"Test case generation method for Go language","title_short":"Test case generation method for Go language","title_sort":"test case generation method for go language","topic":["Testing","Sociology","Statistics","Java","Unit testing","test data and code generation","Golang","coverage"],"url":["http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7936140","http://doi.org/10.1109/ICODSE.2016.7936140"],"publishDate":["2016-10-01"],"physical":["1-5"],"description":"In software industry, the quality of software products should became a primary concern. One of many elements that affects to the software quality is testing. Creating a lot of test cases consumes a lot of time and tedious work. These issues can be solved by create a generator that automates the generation of input test data. Go language, or Golang for short, is a new programming language that developed by Google and has been used by many companies for their projects. However, Golang currently does not have any test generator that is able to generate test data with code coverage adequacy. In this research, we propose a process generation of test cases using Genetic Algorithm for Go language. We also have developed a tool based on this process generation. The tool does not only produce test data, but also the test code. By automating the generation, it is expected to reduce the amount of effort and time to generate manually. We have evaluated this process using eight different Golang source code. We found that the process and tool have facilitated the process of unit testing.","container_start_page":"1","container_title":"2016 International Conference on Data and Software Engineering (ICoDSE)","format_de105":["Article, E-Article"],"format_de14":["Article, E-Article"],"format_de15":["Article, E-Article"],"format_de520":["Article, E-Article"],"format_de540":["Article, E-Article"],"format_dech1":["Article, E-Article"],"format_ded117":["Article, E-Article"],"format_degla1":["E-Article"],"format_del152":["Buch"],"format_del189":["Article, E-Article"],"format_dezi4":["Article"],"format_dezwi2":["Article, E-Article"],"format_nrw":["Article, E-Article"],"branch_nrw":["Electronic Resources"],"_version_":1615864474450788354,"geogr_code":["not assigned"],"last_indexed":"2018-10-31T17:54:07.117Z","geogr_code_person":["not assigned"],"finc_class_facet":["not assigned"]}
