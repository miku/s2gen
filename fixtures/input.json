{"access_facet":"Electronic Resources","author":["Singh, Pravendra"],"spellingShingle":["Singh, Pravendra","Arxiv","Implementing an intelligent version of the classical sliding-puzzle game   for unix terminals using Golang's concurrency primitives","Computer Science - Artificial Intelligence"],"author_sort":"singh, pravendra","spelling":["Singh, Pravendra Arxiv Computer Science - Artificial Intelligence http://arxiv.org/abs/1503.08345 An intelligent version of the sliding-puzzle game is developed using the new Go programming language, which uses a concurrent version of the A* Informed Search Algorithm to power solver-bot that runs in the background. The game runs in computer system's terminals. Mainly, it was developed for UNIX-type systems but it works pretty well in nearly all the operating systems because of cross-platform compatibility of the programming language used. The game uses language's concurrency primitives to simplify most of the hefty parts of the game. A real-time notification delivery architecture is developed using language's built-in concurrency support, which performs similar to event based context aware invocations like we see on the web platform. Comment: 8 pages Implementing an intelligent version of the classical sliding-puzzle game for unix terminals using Golang's concurrency primitives Arxiv"],"facet_avail":["Online"],"format":["ElectronicArticle"],"fullrecord":"blob:ai-121-b2FpOmFyWGl2Lm9yZzoxNTAzLjA4MzQ1","id":"ai-121-b2FpOmFyWGl2Lm9yZzoxNTAzLjA4MzQ1","imprint":"Arxiv, 2015","mega_collection":["Arxiv"],"publishDateSort":"2015","publisher":["Arxiv"],"record_id":"oai:arXiv.org:1503.08345","recordtype":"ai","series":["Arxiv"],"source_id":"121","title":"Implementing an intelligent version of the classical sliding-puzzle game   for unix terminals using Golang's concurrency primitives","title_full":"Implementing an intelligent version of the classical sliding-puzzle game   for unix terminals using Golang's concurrency primitives","title_fullStr":"Implementing an intelligent version of the classical sliding-puzzle game   for unix terminals using Golang's concurrency primitives","title_full_unstemmed":"Implementing an intelligent version of the classical sliding-puzzle game   for unix terminals using Golang's concurrency primitives","title_short":"Implementing an intelligent version of the classical sliding-puzzle game   for unix terminals using Golang's concurrency primitives","title_sort":"implementing an intelligent version of the classical sliding-puzzle game   for unix terminals using golang's concurrency primitives","topic":["Computer Science - Artificial Intelligence"],"url":["http://arxiv.org/abs/1503.08345"],"publishDate":["2015-08-22"],"physical":[""],"description":"  An intelligent version of the sliding-puzzle game is developed using the new Go programming language, which uses a concurrent version of the A* Informed Search Algorithm to power solver-bot that runs in the background. The game runs in computer system's terminals. Mainly, it was developed for UNIX-type systems but it works pretty well in nearly all the operating systems because of cross-platform compatibility of the programming language used. The game uses language's concurrency primitives to simplify most of the hefty parts of the game. A real-time notification delivery architecture is developed using language's built-in concurrency support, which performs similar to event based context aware invocations like we see on the web platform.  Comment: 8 pages","container_title":"Arxiv","format_de105":["Article, E-Article"],"format_de14":["Article, E-Article"],"format_de15":["Article, E-Article"],"format_de520":["Article, E-Article"],"format_de540":["Article, E-Article"],"format_dech1":["Article, E-Article"],"format_ded117":["Article, E-Article"],"format_degla1":["E-Article"],"format_del152":["Buch"],"format_del189":["Article, E-Article"],"format_dezi4":["Article"],"format_dezwi2":["Article, E-Article"],"format_nrw":["Article, E-Article"],"branch_nrw":["Electronic Resources"],"_version_":1615835564950421512,"institution":["finc"],"geogr_code":["not assigned"],"last_indexed":"2018-10-31T10:14:36.692Z","geogr_code_person":["not assigned"],"finc_class_facet":["not assigned"]}
